/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef GetApkInfo_TYPES_H
#define GetApkInfo_TYPES_H

#include <Thrift.h>
#include <TApplicationException.h>
#include <protocol/TProtocol.h>
#include <transport/TTransport.h>



namespace com { namespace jike { namespace mobile { namespace appsearch { namespace thirft {

typedef struct _ApkFullProperty__isset {
  _ApkFullProperty__isset() : securityLevel(false) {}
  bool securityLevel;
} _ApkFullProperty__isset;

class ApkFullProperty {
 public:

  static const char* ascii_fingerprint; // = "FAFBE83614117CCE67058C7F73868BC5";
  static const uint8_t binary_fingerprint[16]; // = {0xFA,0xFB,0xE8,0x36,0x14,0x11,0x7C,0xCE,0x67,0x05,0x8C,0x7F,0x73,0x86,0x8B,0xC5};

  ApkFullProperty() : packageName(""), versionName(""), versionCode(""), minSDK(0), targetSDK(0), smallScreen(true), normalScreen(true), largeScreen(true), xlargeScreen(true), signature(""), icon(""), apkSize(0), securityLevel(0) {
  }

  virtual ~ApkFullProperty() throw() {}

  std::string packageName;
  std::string versionName;
  std::string versionCode;
  std::vector<std::string>  usesPermissonList;
  std::vector<std::string>  usesFeatureList;
  int32_t minSDK;
  int32_t targetSDK;
  bool smallScreen;
  bool normalScreen;
  bool largeScreen;
  bool xlargeScreen;
  std::string signature;
  std::string icon;
  std::map<std::string, std::string>  appName;
  std::vector<std::string>  AdsList;
  double apkSize;
  int32_t securityLevel;

  _ApkFullProperty__isset __isset;

  void __set_packageName(const std::string& val) {
    packageName = val;
  }

  void __set_versionName(const std::string& val) {
    versionName = val;
  }

  void __set_versionCode(const std::string& val) {
    versionCode = val;
  }

  void __set_usesPermissonList(const std::vector<std::string> & val) {
    usesPermissonList = val;
  }

  void __set_usesFeatureList(const std::vector<std::string> & val) {
    usesFeatureList = val;
  }

  void __set_minSDK(const int32_t val) {
    minSDK = val;
  }

  void __set_targetSDK(const int32_t val) {
    targetSDK = val;
  }

  void __set_smallScreen(const bool val) {
    smallScreen = val;
  }

  void __set_normalScreen(const bool val) {
    normalScreen = val;
  }

  void __set_largeScreen(const bool val) {
    largeScreen = val;
  }

  void __set_xlargeScreen(const bool val) {
    xlargeScreen = val;
  }

  void __set_signature(const std::string& val) {
    signature = val;
  }

  void __set_icon(const std::string& val) {
    icon = val;
  }

  void __set_appName(const std::map<std::string, std::string> & val) {
    appName = val;
  }

  void __set_AdsList(const std::vector<std::string> & val) {
    AdsList = val;
  }

  void __set_apkSize(const double val) {
    apkSize = val;
  }

  void __set_securityLevel(const int32_t val) {
    securityLevel = val;
    __isset.securityLevel = true;
  }

  bool operator == (const ApkFullProperty & rhs) const
  {
    if (!(packageName == rhs.packageName))
      return false;
    if (!(versionName == rhs.versionName))
      return false;
    if (!(versionCode == rhs.versionCode))
      return false;
    if (!(usesPermissonList == rhs.usesPermissonList))
      return false;
    if (!(usesFeatureList == rhs.usesFeatureList))
      return false;
    if (!(minSDK == rhs.minSDK))
      return false;
    if (!(targetSDK == rhs.targetSDK))
      return false;
    if (!(smallScreen == rhs.smallScreen))
      return false;
    if (!(normalScreen == rhs.normalScreen))
      return false;
    if (!(largeScreen == rhs.largeScreen))
      return false;
    if (!(xlargeScreen == rhs.xlargeScreen))
      return false;
    if (!(signature == rhs.signature))
      return false;
    if (!(icon == rhs.icon))
      return false;
    if (!(appName == rhs.appName))
      return false;
    if (!(AdsList == rhs.AdsList))
      return false;
    if (!(apkSize == rhs.apkSize))
      return false;
    if (__isset.securityLevel != rhs.__isset.securityLevel)
      return false;
    else if (__isset.securityLevel && !(securityLevel == rhs.securityLevel))
      return false;
    return true;
  }
  bool operator != (const ApkFullProperty &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApkFullProperty & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

}}}}} // namespace

#endif
