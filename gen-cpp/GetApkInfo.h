/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef GetApkInfo_H
#define GetApkInfo_H

#include <TProcessor.h>
#include "GetApkInfo_types.h"

namespace com { namespace jike { namespace mobile { namespace appsearch { namespace thirft {

class GetApkInfoIf {
 public:
  virtual ~GetApkInfoIf() {}
  virtual void getApkFullProperty(ApkFullProperty& _return, const std::string& apkKey) = 0;
};

class GetApkInfoIfFactory {
 public:
  typedef GetApkInfoIf Handler;

  virtual ~GetApkInfoIfFactory() {}

  virtual GetApkInfoIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(GetApkInfoIf* /* handler */) = 0;
};

class GetApkInfoIfSingletonFactory : virtual public GetApkInfoIfFactory {
 public:
  GetApkInfoIfSingletonFactory(const boost::shared_ptr<GetApkInfoIf>& iface) : iface_(iface) {}
  virtual ~GetApkInfoIfSingletonFactory() {}

  virtual GetApkInfoIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(GetApkInfoIf* /* handler */) {}

 protected:
  boost::shared_ptr<GetApkInfoIf> iface_;
};

class GetApkInfoNull : virtual public GetApkInfoIf {
 public:
  virtual ~GetApkInfoNull() {}
  void getApkFullProperty(ApkFullProperty& /* _return */, const std::string& /* apkKey */) {
    return;
  }
};

typedef struct _GetApkInfo_getApkFullProperty_args__isset {
  _GetApkInfo_getApkFullProperty_args__isset() : apkKey(false) {}
  bool apkKey;
} _GetApkInfo_getApkFullProperty_args__isset;

class GetApkInfo_getApkFullProperty_args {
 public:

  GetApkInfo_getApkFullProperty_args() : apkKey("") {
  }

  virtual ~GetApkInfo_getApkFullProperty_args() throw() {}

  std::string apkKey;

  _GetApkInfo_getApkFullProperty_args__isset __isset;

  void __set_apkKey(const std::string& val) {
    apkKey = val;
  }

  bool operator == (const GetApkInfo_getApkFullProperty_args & rhs) const
  {
    if (!(apkKey == rhs.apkKey))
      return false;
    return true;
  }
  bool operator != (const GetApkInfo_getApkFullProperty_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetApkInfo_getApkFullProperty_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GetApkInfo_getApkFullProperty_pargs {
 public:


  virtual ~GetApkInfo_getApkFullProperty_pargs() throw() {}

  const std::string* apkKey;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GetApkInfo_getApkFullProperty_result__isset {
  _GetApkInfo_getApkFullProperty_result__isset() : success(false) {}
  bool success;
} _GetApkInfo_getApkFullProperty_result__isset;

class GetApkInfo_getApkFullProperty_result {
 public:

  GetApkInfo_getApkFullProperty_result() {
  }

  virtual ~GetApkInfo_getApkFullProperty_result() throw() {}

  ApkFullProperty success;

  _GetApkInfo_getApkFullProperty_result__isset __isset;

  void __set_success(const ApkFullProperty& val) {
    success = val;
  }

  bool operator == (const GetApkInfo_getApkFullProperty_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GetApkInfo_getApkFullProperty_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetApkInfo_getApkFullProperty_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GetApkInfo_getApkFullProperty_presult__isset {
  _GetApkInfo_getApkFullProperty_presult__isset() : success(false) {}
  bool success;
} _GetApkInfo_getApkFullProperty_presult__isset;

class GetApkInfo_getApkFullProperty_presult {
 public:


  virtual ~GetApkInfo_getApkFullProperty_presult() throw() {}

  ApkFullProperty* success;

  _GetApkInfo_getApkFullProperty_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class GetApkInfoClient : virtual public GetApkInfoIf {
 public:
  GetApkInfoClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  GetApkInfoClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void getApkFullProperty(ApkFullProperty& _return, const std::string& apkKey);
  void send_getApkFullProperty(const std::string& apkKey);
  void recv_getApkFullProperty(ApkFullProperty& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class GetApkInfoProcessor : public ::apache::thrift::TProcessor {
 protected:
  boost::shared_ptr<GetApkInfoIf> iface_;
  virtual bool process_fn(apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, std::string& fname, int32_t seqid, void* callContext);
 private:
  std::map<std::string, void (GetApkInfoProcessor::*)(int32_t, apache::thrift::protocol::TProtocol*, apache::thrift::protocol::TProtocol*, void*)> processMap_;
  void process_getApkFullProperty(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  GetApkInfoProcessor(boost::shared_ptr<GetApkInfoIf> iface) :
    iface_(iface) {
    processMap_["getApkFullProperty"] = &GetApkInfoProcessor::process_getApkFullProperty;
  }

  virtual bool process(boost::shared_ptr<apache::thrift::protocol::TProtocol> piprot, boost::shared_ptr<apache::thrift::protocol::TProtocol> poprot, void* callContext);
  virtual ~GetApkInfoProcessor() {}
};

class GetApkInfoProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  GetApkInfoProcessorFactory(const ::boost::shared_ptr< GetApkInfoIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< GetApkInfoIfFactory > handlerFactory_;
};

class GetApkInfoMultiface : virtual public GetApkInfoIf {
 public:
  GetApkInfoMultiface(std::vector<boost::shared_ptr<GetApkInfoIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~GetApkInfoMultiface() {}
 protected:
  std::vector<boost::shared_ptr<GetApkInfoIf> > ifaces_;
  GetApkInfoMultiface() {}
  void add(boost::shared_ptr<GetApkInfoIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void getApkFullProperty(ApkFullProperty& _return, const std::string& apkKey) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->getApkFullProperty(_return, apkKey);
        return;
      } else {
        ifaces_[i]->getApkFullProperty(_return, apkKey);
      }
    }
  }

};

}}}}} // namespace

#endif
