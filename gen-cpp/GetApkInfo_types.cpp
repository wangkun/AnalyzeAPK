/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "GetApkInfo_types.h"

namespace com { namespace jike { namespace mobile { namespace appsearch { namespace thirft {

const char* ApkFullProperty::ascii_fingerprint = "FAFBE83614117CCE67058C7F73868BC5";
const uint8_t ApkFullProperty::binary_fingerprint[16] = {0xFA,0xFB,0xE8,0x36,0x14,0x11,0x7C,0xCE,0x67,0x05,0x8C,0x7F,0x73,0x86,0x8B,0xC5};

uint32_t ApkFullProperty::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_packageName = false;
  bool isset_versionName = false;
  bool isset_versionCode = false;
  bool isset_usesPermissonList = false;
  bool isset_usesFeatureList = false;
  bool isset_minSDK = false;
  bool isset_targetSDK = false;
  bool isset_smallScreen = false;
  bool isset_normalScreen = false;
  bool isset_largeScreen = false;
  bool isset_xlargeScreen = false;
  bool isset_signature = false;
  bool isset_icon = false;
  bool isset_appName = false;
  bool isset_AdsList = false;
  bool isset_apkSize = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->packageName);
          isset_packageName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->versionName);
          isset_versionName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->versionCode);
          isset_versionCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->usesPermissonList.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _etype3;
            iprot->readListBegin(_etype3, _size0);
            this->usesPermissonList.resize(_size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              xfer += iprot->readString(this->usesPermissonList[_i4]);
            }
            iprot->readListEnd();
          }
          isset_usesPermissonList = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->usesFeatureList.clear();
            uint32_t _size5;
            ::apache::thrift::protocol::TType _etype8;
            iprot->readListBegin(_etype8, _size5);
            this->usesFeatureList.resize(_size5);
            uint32_t _i9;
            for (_i9 = 0; _i9 < _size5; ++_i9)
            {
              xfer += iprot->readString(this->usesFeatureList[_i9]);
            }
            iprot->readListEnd();
          }
          isset_usesFeatureList = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->minSDK);
          isset_minSDK = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->targetSDK);
          isset_targetSDK = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->smallScreen);
          isset_smallScreen = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->normalScreen);
          isset_normalScreen = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->largeScreen);
          isset_largeScreen = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->xlargeScreen);
          isset_xlargeScreen = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->signature);
          isset_signature = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->icon);
          isset_icon = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->appName.clear();
            uint32_t _size10;
            ::apache::thrift::protocol::TType _ktype11;
            ::apache::thrift::protocol::TType _vtype12;
            iprot->readMapBegin(_ktype11, _vtype12, _size10);
            uint32_t _i14;
            for (_i14 = 0; _i14 < _size10; ++_i14)
            {
              std::string _key15;
              xfer += iprot->readString(_key15);
              std::string& _val16 = this->appName[_key15];
              xfer += iprot->readString(_val16);
            }
            iprot->readMapEnd();
          }
          isset_appName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->AdsList.clear();
            uint32_t _size17;
            ::apache::thrift::protocol::TType _etype20;
            iprot->readListBegin(_etype20, _size17);
            this->AdsList.resize(_size17);
            uint32_t _i21;
            for (_i21 = 0; _i21 < _size17; ++_i21)
            {
              xfer += iprot->readString(this->AdsList[_i21]);
            }
            iprot->readListEnd();
          }
          isset_AdsList = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->apkSize);
          isset_apkSize = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->securityLevel);
          this->__isset.securityLevel = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_packageName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_versionName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_versionCode)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_usesPermissonList)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_usesFeatureList)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_minSDK)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_targetSDK)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_smallScreen)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_normalScreen)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_largeScreen)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_xlargeScreen)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_signature)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_icon)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_appName)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_AdsList)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_apkSize)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t ApkFullProperty::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ApkFullProperty");
  xfer += oprot->writeFieldBegin("packageName", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->packageName);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("versionName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->versionName);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("versionCode", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->versionCode);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("usesPermissonList", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->usesPermissonList.size()));
    std::vector<std::string> ::const_iterator _iter22;
    for (_iter22 = this->usesPermissonList.begin(); _iter22 != this->usesPermissonList.end(); ++_iter22)
    {
      xfer += oprot->writeString((*_iter22));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("usesFeatureList", ::apache::thrift::protocol::T_LIST, 5);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->usesFeatureList.size()));
    std::vector<std::string> ::const_iterator _iter23;
    for (_iter23 = this->usesFeatureList.begin(); _iter23 != this->usesFeatureList.end(); ++_iter23)
    {
      xfer += oprot->writeString((*_iter23));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("minSDK", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->minSDK);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("targetSDK", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->targetSDK);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("smallScreen", ::apache::thrift::protocol::T_BOOL, 8);
  xfer += oprot->writeBool(this->smallScreen);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("normalScreen", ::apache::thrift::protocol::T_BOOL, 9);
  xfer += oprot->writeBool(this->normalScreen);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("largeScreen", ::apache::thrift::protocol::T_BOOL, 10);
  xfer += oprot->writeBool(this->largeScreen);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("xlargeScreen", ::apache::thrift::protocol::T_BOOL, 11);
  xfer += oprot->writeBool(this->xlargeScreen);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("signature", ::apache::thrift::protocol::T_STRING, 12);
  xfer += oprot->writeString(this->signature);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("icon", ::apache::thrift::protocol::T_STRING, 13);
  xfer += oprot->writeBinary(this->icon);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("appName", ::apache::thrift::protocol::T_MAP, 14);
  {
    xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->appName.size()));
    std::map<std::string, std::string> ::const_iterator _iter24;
    for (_iter24 = this->appName.begin(); _iter24 != this->appName.end(); ++_iter24)
    {
      xfer += oprot->writeString(_iter24->first);
      xfer += oprot->writeString(_iter24->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("AdsList", ::apache::thrift::protocol::T_LIST, 15);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->AdsList.size()));
    std::vector<std::string> ::const_iterator _iter25;
    for (_iter25 = this->AdsList.begin(); _iter25 != this->AdsList.end(); ++_iter25)
    {
      xfer += oprot->writeString((*_iter25));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("apkSize", ::apache::thrift::protocol::T_DOUBLE, 16);
  xfer += oprot->writeDouble(this->apkSize);
  xfer += oprot->writeFieldEnd();
  if (this->__isset.securityLevel) {
    xfer += oprot->writeFieldBegin("securityLevel", ::apache::thrift::protocol::T_I32, 17);
    xfer += oprot->writeI32(this->securityLevel);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

}}}}} // namespace
