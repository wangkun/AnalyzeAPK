/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.jike.mobile.appsearch.thirft;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ApkSimpleProperty implements org.apache.thrift.TBase<ApkSimpleProperty, ApkSimpleProperty._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ApkSimpleProperty");

  private static final org.apache.thrift.protocol.TField PACKAGE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("packageName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField VERSION_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("versionName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField VERSION_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("versionCode", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField USES_PERMISSON_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("usesPermissonList", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField USES_FEATURE_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("usesFeatureList", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField MIN_SDK_FIELD_DESC = new org.apache.thrift.protocol.TField("minSDK", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField TARGET_SDK_FIELD_DESC = new org.apache.thrift.protocol.TField("targetSDK", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField SMALL_SCREEN_FIELD_DESC = new org.apache.thrift.protocol.TField("smallScreen", org.apache.thrift.protocol.TType.BOOL, (short)8);
  private static final org.apache.thrift.protocol.TField NORMAL_SCREEN_FIELD_DESC = new org.apache.thrift.protocol.TField("normalScreen", org.apache.thrift.protocol.TType.BOOL, (short)9);
  private static final org.apache.thrift.protocol.TField LARGE_SCREEN_FIELD_DESC = new org.apache.thrift.protocol.TField("largeScreen", org.apache.thrift.protocol.TType.BOOL, (short)10);
  private static final org.apache.thrift.protocol.TField XLARGE_SCREEN_FIELD_DESC = new org.apache.thrift.protocol.TField("xlargeScreen", org.apache.thrift.protocol.TType.BOOL, (short)11);
  private static final org.apache.thrift.protocol.TField SIGNATURE_FIELD_DESC = new org.apache.thrift.protocol.TField("signature", org.apache.thrift.protocol.TType.STRING, (short)12);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ApkSimplePropertyStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ApkSimplePropertyTupleSchemeFactory());
  }

  public String packageName; // required
  public String versionName; // required
  public String versionCode; // required
  public List<String> usesPermissonList; // required
  public List<String> usesFeatureList; // required
  public int minSDK; // required
  public int targetSDK; // required
  public boolean smallScreen; // required
  public boolean normalScreen; // required
  public boolean largeScreen; // required
  public boolean xlargeScreen; // required
  public String signature; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PACKAGE_NAME((short)1, "packageName"),
    VERSION_NAME((short)2, "versionName"),
    VERSION_CODE((short)3, "versionCode"),
    USES_PERMISSON_LIST((short)4, "usesPermissonList"),
    USES_FEATURE_LIST((short)5, "usesFeatureList"),
    MIN_SDK((short)6, "minSDK"),
    TARGET_SDK((short)7, "targetSDK"),
    SMALL_SCREEN((short)8, "smallScreen"),
    NORMAL_SCREEN((short)9, "normalScreen"),
    LARGE_SCREEN((short)10, "largeScreen"),
    XLARGE_SCREEN((short)11, "xlargeScreen"),
    SIGNATURE((short)12, "signature");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PACKAGE_NAME
          return PACKAGE_NAME;
        case 2: // VERSION_NAME
          return VERSION_NAME;
        case 3: // VERSION_CODE
          return VERSION_CODE;
        case 4: // USES_PERMISSON_LIST
          return USES_PERMISSON_LIST;
        case 5: // USES_FEATURE_LIST
          return USES_FEATURE_LIST;
        case 6: // MIN_SDK
          return MIN_SDK;
        case 7: // TARGET_SDK
          return TARGET_SDK;
        case 8: // SMALL_SCREEN
          return SMALL_SCREEN;
        case 9: // NORMAL_SCREEN
          return NORMAL_SCREEN;
        case 10: // LARGE_SCREEN
          return LARGE_SCREEN;
        case 11: // XLARGE_SCREEN
          return XLARGE_SCREEN;
        case 12: // SIGNATURE
          return SIGNATURE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MINSDK_ISSET_ID = 0;
  private static final int __TARGETSDK_ISSET_ID = 1;
  private static final int __SMALLSCREEN_ISSET_ID = 2;
  private static final int __NORMALSCREEN_ISSET_ID = 3;
  private static final int __LARGESCREEN_ISSET_ID = 4;
  private static final int __XLARGESCREEN_ISSET_ID = 5;
  private BitSet __isset_bit_vector = new BitSet(6);
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PACKAGE_NAME, new org.apache.thrift.meta_data.FieldMetaData("packageName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VERSION_NAME, new org.apache.thrift.meta_data.FieldMetaData("versionName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VERSION_CODE, new org.apache.thrift.meta_data.FieldMetaData("versionCode", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USES_PERMISSON_LIST, new org.apache.thrift.meta_data.FieldMetaData("usesPermissonList", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.USES_FEATURE_LIST, new org.apache.thrift.meta_data.FieldMetaData("usesFeatureList", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.MIN_SDK, new org.apache.thrift.meta_data.FieldMetaData("minSDK", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TARGET_SDK, new org.apache.thrift.meta_data.FieldMetaData("targetSDK", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SMALL_SCREEN, new org.apache.thrift.meta_data.FieldMetaData("smallScreen", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.NORMAL_SCREEN, new org.apache.thrift.meta_data.FieldMetaData("normalScreen", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.LARGE_SCREEN, new org.apache.thrift.meta_data.FieldMetaData("largeScreen", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.XLARGE_SCREEN, new org.apache.thrift.meta_data.FieldMetaData("xlargeScreen", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.SIGNATURE, new org.apache.thrift.meta_data.FieldMetaData("signature", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ApkSimpleProperty.class, metaDataMap);
  }

  public ApkSimpleProperty() {
    this.minSDK = 0;

    this.targetSDK = 0;

    this.smallScreen = true;

    this.normalScreen = true;

    this.largeScreen = true;

    this.xlargeScreen = true;

  }

  public ApkSimpleProperty(
    String packageName,
    String versionName,
    String versionCode,
    List<String> usesPermissonList,
    List<String> usesFeatureList,
    int minSDK,
    int targetSDK,
    boolean smallScreen,
    boolean normalScreen,
    boolean largeScreen,
    boolean xlargeScreen,
    String signature)
  {
    this();
    this.packageName = packageName;
    this.versionName = versionName;
    this.versionCode = versionCode;
    this.usesPermissonList = usesPermissonList;
    this.usesFeatureList = usesFeatureList;
    this.minSDK = minSDK;
    setMinSDKIsSet(true);
    this.targetSDK = targetSDK;
    setTargetSDKIsSet(true);
    this.smallScreen = smallScreen;
    setSmallScreenIsSet(true);
    this.normalScreen = normalScreen;
    setNormalScreenIsSet(true);
    this.largeScreen = largeScreen;
    setLargeScreenIsSet(true);
    this.xlargeScreen = xlargeScreen;
    setXlargeScreenIsSet(true);
    this.signature = signature;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ApkSimpleProperty(ApkSimpleProperty other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetPackageName()) {
      this.packageName = other.packageName;
    }
    if (other.isSetVersionName()) {
      this.versionName = other.versionName;
    }
    if (other.isSetVersionCode()) {
      this.versionCode = other.versionCode;
    }
    if (other.isSetUsesPermissonList()) {
      List<String> __this__usesPermissonList = new ArrayList<String>();
      for (String other_element : other.usesPermissonList) {
        __this__usesPermissonList.add(other_element);
      }
      this.usesPermissonList = __this__usesPermissonList;
    }
    if (other.isSetUsesFeatureList()) {
      List<String> __this__usesFeatureList = new ArrayList<String>();
      for (String other_element : other.usesFeatureList) {
        __this__usesFeatureList.add(other_element);
      }
      this.usesFeatureList = __this__usesFeatureList;
    }
    this.minSDK = other.minSDK;
    this.targetSDK = other.targetSDK;
    this.smallScreen = other.smallScreen;
    this.normalScreen = other.normalScreen;
    this.largeScreen = other.largeScreen;
    this.xlargeScreen = other.xlargeScreen;
    if (other.isSetSignature()) {
      this.signature = other.signature;
    }
  }

  public ApkSimpleProperty deepCopy() {
    return new ApkSimpleProperty(this);
  }

  @Override
  public void clear() {
    this.packageName = null;
    this.versionName = null;
    this.versionCode = null;
    this.usesPermissonList = null;
    this.usesFeatureList = null;
    this.minSDK = 0;

    this.targetSDK = 0;

    this.smallScreen = true;

    this.normalScreen = true;

    this.largeScreen = true;

    this.xlargeScreen = true;

    this.signature = null;
  }

  public String getPackageName() {
    return this.packageName;
  }

  public ApkSimpleProperty setPackageName(String packageName) {
    this.packageName = packageName;
    return this;
  }

  public void unsetPackageName() {
    this.packageName = null;
  }

  /** Returns true if field packageName is set (has been assigned a value) and false otherwise */
  public boolean isSetPackageName() {
    return this.packageName != null;
  }

  public void setPackageNameIsSet(boolean value) {
    if (!value) {
      this.packageName = null;
    }
  }

  public String getVersionName() {
    return this.versionName;
  }

  public ApkSimpleProperty setVersionName(String versionName) {
    this.versionName = versionName;
    return this;
  }

  public void unsetVersionName() {
    this.versionName = null;
  }

  /** Returns true if field versionName is set (has been assigned a value) and false otherwise */
  public boolean isSetVersionName() {
    return this.versionName != null;
  }

  public void setVersionNameIsSet(boolean value) {
    if (!value) {
      this.versionName = null;
    }
  }

  public String getVersionCode() {
    return this.versionCode;
  }

  public ApkSimpleProperty setVersionCode(String versionCode) {
    this.versionCode = versionCode;
    return this;
  }

  public void unsetVersionCode() {
    this.versionCode = null;
  }

  /** Returns true if field versionCode is set (has been assigned a value) and false otherwise */
  public boolean isSetVersionCode() {
    return this.versionCode != null;
  }

  public void setVersionCodeIsSet(boolean value) {
    if (!value) {
      this.versionCode = null;
    }
  }

  public int getUsesPermissonListSize() {
    return (this.usesPermissonList == null) ? 0 : this.usesPermissonList.size();
  }

  public java.util.Iterator<String> getUsesPermissonListIterator() {
    return (this.usesPermissonList == null) ? null : this.usesPermissonList.iterator();
  }

  public void addToUsesPermissonList(String elem) {
    if (this.usesPermissonList == null) {
      this.usesPermissonList = new ArrayList<String>();
    }
    this.usesPermissonList.add(elem);
  }

  public List<String> getUsesPermissonList() {
    return this.usesPermissonList;
  }

  public ApkSimpleProperty setUsesPermissonList(List<String> usesPermissonList) {
    this.usesPermissonList = usesPermissonList;
    return this;
  }

  public void unsetUsesPermissonList() {
    this.usesPermissonList = null;
  }

  /** Returns true if field usesPermissonList is set (has been assigned a value) and false otherwise */
  public boolean isSetUsesPermissonList() {
    return this.usesPermissonList != null;
  }

  public void setUsesPermissonListIsSet(boolean value) {
    if (!value) {
      this.usesPermissonList = null;
    }
  }

  public int getUsesFeatureListSize() {
    return (this.usesFeatureList == null) ? 0 : this.usesFeatureList.size();
  }

  public java.util.Iterator<String> getUsesFeatureListIterator() {
    return (this.usesFeatureList == null) ? null : this.usesFeatureList.iterator();
  }

  public void addToUsesFeatureList(String elem) {
    if (this.usesFeatureList == null) {
      this.usesFeatureList = new ArrayList<String>();
    }
    this.usesFeatureList.add(elem);
  }

  public List<String> getUsesFeatureList() {
    return this.usesFeatureList;
  }

  public ApkSimpleProperty setUsesFeatureList(List<String> usesFeatureList) {
    this.usesFeatureList = usesFeatureList;
    return this;
  }

  public void unsetUsesFeatureList() {
    this.usesFeatureList = null;
  }

  /** Returns true if field usesFeatureList is set (has been assigned a value) and false otherwise */
  public boolean isSetUsesFeatureList() {
    return this.usesFeatureList != null;
  }

  public void setUsesFeatureListIsSet(boolean value) {
    if (!value) {
      this.usesFeatureList = null;
    }
  }

  public int getMinSDK() {
    return this.minSDK;
  }

  public ApkSimpleProperty setMinSDK(int minSDK) {
    this.minSDK = minSDK;
    setMinSDKIsSet(true);
    return this;
  }

  public void unsetMinSDK() {
    __isset_bit_vector.clear(__MINSDK_ISSET_ID);
  }

  /** Returns true if field minSDK is set (has been assigned a value) and false otherwise */
  public boolean isSetMinSDK() {
    return __isset_bit_vector.get(__MINSDK_ISSET_ID);
  }

  public void setMinSDKIsSet(boolean value) {
    __isset_bit_vector.set(__MINSDK_ISSET_ID, value);
  }

  public int getTargetSDK() {
    return this.targetSDK;
  }

  public ApkSimpleProperty setTargetSDK(int targetSDK) {
    this.targetSDK = targetSDK;
    setTargetSDKIsSet(true);
    return this;
  }

  public void unsetTargetSDK() {
    __isset_bit_vector.clear(__TARGETSDK_ISSET_ID);
  }

  /** Returns true if field targetSDK is set (has been assigned a value) and false otherwise */
  public boolean isSetTargetSDK() {
    return __isset_bit_vector.get(__TARGETSDK_ISSET_ID);
  }

  public void setTargetSDKIsSet(boolean value) {
    __isset_bit_vector.set(__TARGETSDK_ISSET_ID, value);
  }

  public boolean isSmallScreen() {
    return this.smallScreen;
  }

  public ApkSimpleProperty setSmallScreen(boolean smallScreen) {
    this.smallScreen = smallScreen;
    setSmallScreenIsSet(true);
    return this;
  }

  public void unsetSmallScreen() {
    __isset_bit_vector.clear(__SMALLSCREEN_ISSET_ID);
  }

  /** Returns true if field smallScreen is set (has been assigned a value) and false otherwise */
  public boolean isSetSmallScreen() {
    return __isset_bit_vector.get(__SMALLSCREEN_ISSET_ID);
  }

  public void setSmallScreenIsSet(boolean value) {
    __isset_bit_vector.set(__SMALLSCREEN_ISSET_ID, value);
  }

  public boolean isNormalScreen() {
    return this.normalScreen;
  }

  public ApkSimpleProperty setNormalScreen(boolean normalScreen) {
    this.normalScreen = normalScreen;
    setNormalScreenIsSet(true);
    return this;
  }

  public void unsetNormalScreen() {
    __isset_bit_vector.clear(__NORMALSCREEN_ISSET_ID);
  }

  /** Returns true if field normalScreen is set (has been assigned a value) and false otherwise */
  public boolean isSetNormalScreen() {
    return __isset_bit_vector.get(__NORMALSCREEN_ISSET_ID);
  }

  public void setNormalScreenIsSet(boolean value) {
    __isset_bit_vector.set(__NORMALSCREEN_ISSET_ID, value);
  }

  public boolean isLargeScreen() {
    return this.largeScreen;
  }

  public ApkSimpleProperty setLargeScreen(boolean largeScreen) {
    this.largeScreen = largeScreen;
    setLargeScreenIsSet(true);
    return this;
  }

  public void unsetLargeScreen() {
    __isset_bit_vector.clear(__LARGESCREEN_ISSET_ID);
  }

  /** Returns true if field largeScreen is set (has been assigned a value) and false otherwise */
  public boolean isSetLargeScreen() {
    return __isset_bit_vector.get(__LARGESCREEN_ISSET_ID);
  }

  public void setLargeScreenIsSet(boolean value) {
    __isset_bit_vector.set(__LARGESCREEN_ISSET_ID, value);
  }

  public boolean isXlargeScreen() {
    return this.xlargeScreen;
  }

  public ApkSimpleProperty setXlargeScreen(boolean xlargeScreen) {
    this.xlargeScreen = xlargeScreen;
    setXlargeScreenIsSet(true);
    return this;
  }

  public void unsetXlargeScreen() {
    __isset_bit_vector.clear(__XLARGESCREEN_ISSET_ID);
  }

  /** Returns true if field xlargeScreen is set (has been assigned a value) and false otherwise */
  public boolean isSetXlargeScreen() {
    return __isset_bit_vector.get(__XLARGESCREEN_ISSET_ID);
  }

  public void setXlargeScreenIsSet(boolean value) {
    __isset_bit_vector.set(__XLARGESCREEN_ISSET_ID, value);
  }

  public String getSignature() {
    return this.signature;
  }

  public ApkSimpleProperty setSignature(String signature) {
    this.signature = signature;
    return this;
  }

  public void unsetSignature() {
    this.signature = null;
  }

  /** Returns true if field signature is set (has been assigned a value) and false otherwise */
  public boolean isSetSignature() {
    return this.signature != null;
  }

  public void setSignatureIsSet(boolean value) {
    if (!value) {
      this.signature = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PACKAGE_NAME:
      if (value == null) {
        unsetPackageName();
      } else {
        setPackageName((String)value);
      }
      break;

    case VERSION_NAME:
      if (value == null) {
        unsetVersionName();
      } else {
        setVersionName((String)value);
      }
      break;

    case VERSION_CODE:
      if (value == null) {
        unsetVersionCode();
      } else {
        setVersionCode((String)value);
      }
      break;

    case USES_PERMISSON_LIST:
      if (value == null) {
        unsetUsesPermissonList();
      } else {
        setUsesPermissonList((List<String>)value);
      }
      break;

    case USES_FEATURE_LIST:
      if (value == null) {
        unsetUsesFeatureList();
      } else {
        setUsesFeatureList((List<String>)value);
      }
      break;

    case MIN_SDK:
      if (value == null) {
        unsetMinSDK();
      } else {
        setMinSDK((Integer)value);
      }
      break;

    case TARGET_SDK:
      if (value == null) {
        unsetTargetSDK();
      } else {
        setTargetSDK((Integer)value);
      }
      break;

    case SMALL_SCREEN:
      if (value == null) {
        unsetSmallScreen();
      } else {
        setSmallScreen((Boolean)value);
      }
      break;

    case NORMAL_SCREEN:
      if (value == null) {
        unsetNormalScreen();
      } else {
        setNormalScreen((Boolean)value);
      }
      break;

    case LARGE_SCREEN:
      if (value == null) {
        unsetLargeScreen();
      } else {
        setLargeScreen((Boolean)value);
      }
      break;

    case XLARGE_SCREEN:
      if (value == null) {
        unsetXlargeScreen();
      } else {
        setXlargeScreen((Boolean)value);
      }
      break;

    case SIGNATURE:
      if (value == null) {
        unsetSignature();
      } else {
        setSignature((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PACKAGE_NAME:
      return getPackageName();

    case VERSION_NAME:
      return getVersionName();

    case VERSION_CODE:
      return getVersionCode();

    case USES_PERMISSON_LIST:
      return getUsesPermissonList();

    case USES_FEATURE_LIST:
      return getUsesFeatureList();

    case MIN_SDK:
      return Integer.valueOf(getMinSDK());

    case TARGET_SDK:
      return Integer.valueOf(getTargetSDK());

    case SMALL_SCREEN:
      return Boolean.valueOf(isSmallScreen());

    case NORMAL_SCREEN:
      return Boolean.valueOf(isNormalScreen());

    case LARGE_SCREEN:
      return Boolean.valueOf(isLargeScreen());

    case XLARGE_SCREEN:
      return Boolean.valueOf(isXlargeScreen());

    case SIGNATURE:
      return getSignature();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PACKAGE_NAME:
      return isSetPackageName();
    case VERSION_NAME:
      return isSetVersionName();
    case VERSION_CODE:
      return isSetVersionCode();
    case USES_PERMISSON_LIST:
      return isSetUsesPermissonList();
    case USES_FEATURE_LIST:
      return isSetUsesFeatureList();
    case MIN_SDK:
      return isSetMinSDK();
    case TARGET_SDK:
      return isSetTargetSDK();
    case SMALL_SCREEN:
      return isSetSmallScreen();
    case NORMAL_SCREEN:
      return isSetNormalScreen();
    case LARGE_SCREEN:
      return isSetLargeScreen();
    case XLARGE_SCREEN:
      return isSetXlargeScreen();
    case SIGNATURE:
      return isSetSignature();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ApkSimpleProperty)
      return this.equals((ApkSimpleProperty)that);
    return false;
  }

  public boolean equals(ApkSimpleProperty that) {
    if (that == null)
      return false;

    boolean this_present_packageName = true && this.isSetPackageName();
    boolean that_present_packageName = true && that.isSetPackageName();
    if (this_present_packageName || that_present_packageName) {
      if (!(this_present_packageName && that_present_packageName))
        return false;
      if (!this.packageName.equals(that.packageName))
        return false;
    }

    boolean this_present_versionName = true && this.isSetVersionName();
    boolean that_present_versionName = true && that.isSetVersionName();
    if (this_present_versionName || that_present_versionName) {
      if (!(this_present_versionName && that_present_versionName))
        return false;
      if (!this.versionName.equals(that.versionName))
        return false;
    }

    boolean this_present_versionCode = true && this.isSetVersionCode();
    boolean that_present_versionCode = true && that.isSetVersionCode();
    if (this_present_versionCode || that_present_versionCode) {
      if (!(this_present_versionCode && that_present_versionCode))
        return false;
      if (!this.versionCode.equals(that.versionCode))
        return false;
    }

    boolean this_present_usesPermissonList = true && this.isSetUsesPermissonList();
    boolean that_present_usesPermissonList = true && that.isSetUsesPermissonList();
    if (this_present_usesPermissonList || that_present_usesPermissonList) {
      if (!(this_present_usesPermissonList && that_present_usesPermissonList))
        return false;
      if (!this.usesPermissonList.equals(that.usesPermissonList))
        return false;
    }

    boolean this_present_usesFeatureList = true && this.isSetUsesFeatureList();
    boolean that_present_usesFeatureList = true && that.isSetUsesFeatureList();
    if (this_present_usesFeatureList || that_present_usesFeatureList) {
      if (!(this_present_usesFeatureList && that_present_usesFeatureList))
        return false;
      if (!this.usesFeatureList.equals(that.usesFeatureList))
        return false;
    }

    boolean this_present_minSDK = true;
    boolean that_present_minSDK = true;
    if (this_present_minSDK || that_present_minSDK) {
      if (!(this_present_minSDK && that_present_minSDK))
        return false;
      if (this.minSDK != that.minSDK)
        return false;
    }

    boolean this_present_targetSDK = true;
    boolean that_present_targetSDK = true;
    if (this_present_targetSDK || that_present_targetSDK) {
      if (!(this_present_targetSDK && that_present_targetSDK))
        return false;
      if (this.targetSDK != that.targetSDK)
        return false;
    }

    boolean this_present_smallScreen = true;
    boolean that_present_smallScreen = true;
    if (this_present_smallScreen || that_present_smallScreen) {
      if (!(this_present_smallScreen && that_present_smallScreen))
        return false;
      if (this.smallScreen != that.smallScreen)
        return false;
    }

    boolean this_present_normalScreen = true;
    boolean that_present_normalScreen = true;
    if (this_present_normalScreen || that_present_normalScreen) {
      if (!(this_present_normalScreen && that_present_normalScreen))
        return false;
      if (this.normalScreen != that.normalScreen)
        return false;
    }

    boolean this_present_largeScreen = true;
    boolean that_present_largeScreen = true;
    if (this_present_largeScreen || that_present_largeScreen) {
      if (!(this_present_largeScreen && that_present_largeScreen))
        return false;
      if (this.largeScreen != that.largeScreen)
        return false;
    }

    boolean this_present_xlargeScreen = true;
    boolean that_present_xlargeScreen = true;
    if (this_present_xlargeScreen || that_present_xlargeScreen) {
      if (!(this_present_xlargeScreen && that_present_xlargeScreen))
        return false;
      if (this.xlargeScreen != that.xlargeScreen)
        return false;
    }

    boolean this_present_signature = true && this.isSetSignature();
    boolean that_present_signature = true && that.isSetSignature();
    if (this_present_signature || that_present_signature) {
      if (!(this_present_signature && that_present_signature))
        return false;
      if (!this.signature.equals(that.signature))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(ApkSimpleProperty other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    ApkSimpleProperty typedOther = (ApkSimpleProperty)other;

    lastComparison = Boolean.valueOf(isSetPackageName()).compareTo(typedOther.isSetPackageName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPackageName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.packageName, typedOther.packageName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVersionName()).compareTo(typedOther.isSetVersionName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersionName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.versionName, typedOther.versionName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVersionCode()).compareTo(typedOther.isSetVersionCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersionCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.versionCode, typedOther.versionCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUsesPermissonList()).compareTo(typedOther.isSetUsesPermissonList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUsesPermissonList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.usesPermissonList, typedOther.usesPermissonList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUsesFeatureList()).compareTo(typedOther.isSetUsesFeatureList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUsesFeatureList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.usesFeatureList, typedOther.usesFeatureList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMinSDK()).compareTo(typedOther.isSetMinSDK());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMinSDK()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.minSDK, typedOther.minSDK);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTargetSDK()).compareTo(typedOther.isSetTargetSDK());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTargetSDK()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.targetSDK, typedOther.targetSDK);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSmallScreen()).compareTo(typedOther.isSetSmallScreen());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSmallScreen()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.smallScreen, typedOther.smallScreen);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNormalScreen()).compareTo(typedOther.isSetNormalScreen());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNormalScreen()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.normalScreen, typedOther.normalScreen);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLargeScreen()).compareTo(typedOther.isSetLargeScreen());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLargeScreen()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.largeScreen, typedOther.largeScreen);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetXlargeScreen()).compareTo(typedOther.isSetXlargeScreen());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetXlargeScreen()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.xlargeScreen, typedOther.xlargeScreen);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSignature()).compareTo(typedOther.isSetSignature());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSignature()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.signature, typedOther.signature);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ApkSimpleProperty(");
    boolean first = true;

    sb.append("packageName:");
    if (this.packageName == null) {
      sb.append("null");
    } else {
      sb.append(this.packageName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("versionName:");
    if (this.versionName == null) {
      sb.append("null");
    } else {
      sb.append(this.versionName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("versionCode:");
    if (this.versionCode == null) {
      sb.append("null");
    } else {
      sb.append(this.versionCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("usesPermissonList:");
    if (this.usesPermissonList == null) {
      sb.append("null");
    } else {
      sb.append(this.usesPermissonList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("usesFeatureList:");
    if (this.usesFeatureList == null) {
      sb.append("null");
    } else {
      sb.append(this.usesFeatureList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("minSDK:");
    sb.append(this.minSDK);
    first = false;
    if (!first) sb.append(", ");
    sb.append("targetSDK:");
    sb.append(this.targetSDK);
    first = false;
    if (!first) sb.append(", ");
    sb.append("smallScreen:");
    sb.append(this.smallScreen);
    first = false;
    if (!first) sb.append(", ");
    sb.append("normalScreen:");
    sb.append(this.normalScreen);
    first = false;
    if (!first) sb.append(", ");
    sb.append("largeScreen:");
    sb.append(this.largeScreen);
    first = false;
    if (!first) sb.append(", ");
    sb.append("xlargeScreen:");
    sb.append(this.xlargeScreen);
    first = false;
    if (!first) sb.append(", ");
    sb.append("signature:");
    if (this.signature == null) {
      sb.append("null");
    } else {
      sb.append(this.signature);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (packageName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'packageName' was not present! Struct: " + toString());
    }
    if (versionName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'versionName' was not present! Struct: " + toString());
    }
    if (versionCode == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'versionCode' was not present! Struct: " + toString());
    }
    if (usesPermissonList == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'usesPermissonList' was not present! Struct: " + toString());
    }
    if (usesFeatureList == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'usesFeatureList' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'minSDK' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'targetSDK' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'smallScreen' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'normalScreen' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'largeScreen' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'xlargeScreen' because it's a primitive and you chose the non-beans generator.
    if (signature == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'signature' was not present! Struct: " + toString());
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ApkSimplePropertyStandardSchemeFactory implements SchemeFactory {
    public ApkSimplePropertyStandardScheme getScheme() {
      return new ApkSimplePropertyStandardScheme();
    }
  }

  private static class ApkSimplePropertyStandardScheme extends StandardScheme<ApkSimpleProperty> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ApkSimpleProperty struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PACKAGE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.packageName = iprot.readString();
              struct.setPackageNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // VERSION_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.versionName = iprot.readString();
              struct.setVersionNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // VERSION_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.versionCode = iprot.readString();
              struct.setVersionCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // USES_PERMISSON_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.usesPermissonList = new ArrayList<String>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  String _elem2; // required
                  _elem2 = iprot.readString();
                  struct.usesPermissonList.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.setUsesPermissonListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // USES_FEATURE_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.usesFeatureList = new ArrayList<String>(_list3.size);
                for (int _i4 = 0; _i4 < _list3.size; ++_i4)
                {
                  String _elem5; // required
                  _elem5 = iprot.readString();
                  struct.usesFeatureList.add(_elem5);
                }
                iprot.readListEnd();
              }
              struct.setUsesFeatureListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // MIN_SDK
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.minSDK = iprot.readI32();
              struct.setMinSDKIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TARGET_SDK
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.targetSDK = iprot.readI32();
              struct.setTargetSDKIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // SMALL_SCREEN
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.smallScreen = iprot.readBool();
              struct.setSmallScreenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // NORMAL_SCREEN
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.normalScreen = iprot.readBool();
              struct.setNormalScreenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // LARGE_SCREEN
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.largeScreen = iprot.readBool();
              struct.setLargeScreenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // XLARGE_SCREEN
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.xlargeScreen = iprot.readBool();
              struct.setXlargeScreenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // SIGNATURE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.signature = iprot.readString();
              struct.setSignatureIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetMinSDK()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'minSDK' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetTargetSDK()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'targetSDK' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetSmallScreen()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'smallScreen' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetNormalScreen()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'normalScreen' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetLargeScreen()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'largeScreen' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetXlargeScreen()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'xlargeScreen' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ApkSimpleProperty struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.packageName != null) {
        oprot.writeFieldBegin(PACKAGE_NAME_FIELD_DESC);
        oprot.writeString(struct.packageName);
        oprot.writeFieldEnd();
      }
      if (struct.versionName != null) {
        oprot.writeFieldBegin(VERSION_NAME_FIELD_DESC);
        oprot.writeString(struct.versionName);
        oprot.writeFieldEnd();
      }
      if (struct.versionCode != null) {
        oprot.writeFieldBegin(VERSION_CODE_FIELD_DESC);
        oprot.writeString(struct.versionCode);
        oprot.writeFieldEnd();
      }
      if (struct.usesPermissonList != null) {
        oprot.writeFieldBegin(USES_PERMISSON_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.usesPermissonList.size()));
          for (String _iter6 : struct.usesPermissonList)
          {
            oprot.writeString(_iter6);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.usesFeatureList != null) {
        oprot.writeFieldBegin(USES_FEATURE_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.usesFeatureList.size()));
          for (String _iter7 : struct.usesFeatureList)
          {
            oprot.writeString(_iter7);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MIN_SDK_FIELD_DESC);
      oprot.writeI32(struct.minSDK);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TARGET_SDK_FIELD_DESC);
      oprot.writeI32(struct.targetSDK);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SMALL_SCREEN_FIELD_DESC);
      oprot.writeBool(struct.smallScreen);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NORMAL_SCREEN_FIELD_DESC);
      oprot.writeBool(struct.normalScreen);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LARGE_SCREEN_FIELD_DESC);
      oprot.writeBool(struct.largeScreen);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(XLARGE_SCREEN_FIELD_DESC);
      oprot.writeBool(struct.xlargeScreen);
      oprot.writeFieldEnd();
      if (struct.signature != null) {
        oprot.writeFieldBegin(SIGNATURE_FIELD_DESC);
        oprot.writeString(struct.signature);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ApkSimplePropertyTupleSchemeFactory implements SchemeFactory {
    public ApkSimplePropertyTupleScheme getScheme() {
      return new ApkSimplePropertyTupleScheme();
    }
  }

  private static class ApkSimplePropertyTupleScheme extends TupleScheme<ApkSimpleProperty> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ApkSimpleProperty struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.packageName);
      oprot.writeString(struct.versionName);
      oprot.writeString(struct.versionCode);
      {
        oprot.writeI32(struct.usesPermissonList.size());
        for (String _iter8 : struct.usesPermissonList)
        {
          oprot.writeString(_iter8);
        }
      }
      {
        oprot.writeI32(struct.usesFeatureList.size());
        for (String _iter9 : struct.usesFeatureList)
        {
          oprot.writeString(_iter9);
        }
      }
      oprot.writeI32(struct.minSDK);
      oprot.writeI32(struct.targetSDK);
      oprot.writeBool(struct.smallScreen);
      oprot.writeBool(struct.normalScreen);
      oprot.writeBool(struct.largeScreen);
      oprot.writeBool(struct.xlargeScreen);
      oprot.writeString(struct.signature);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ApkSimpleProperty struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.packageName = iprot.readString();
      struct.setPackageNameIsSet(true);
      struct.versionName = iprot.readString();
      struct.setVersionNameIsSet(true);
      struct.versionCode = iprot.readString();
      struct.setVersionCodeIsSet(true);
      {
        org.apache.thrift.protocol.TList _list10 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
        struct.usesPermissonList = new ArrayList<String>(_list10.size);
        for (int _i11 = 0; _i11 < _list10.size; ++_i11)
        {
          String _elem12; // required
          _elem12 = iprot.readString();
          struct.usesPermissonList.add(_elem12);
        }
      }
      struct.setUsesPermissonListIsSet(true);
      {
        org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
        struct.usesFeatureList = new ArrayList<String>(_list13.size);
        for (int _i14 = 0; _i14 < _list13.size; ++_i14)
        {
          String _elem15; // required
          _elem15 = iprot.readString();
          struct.usesFeatureList.add(_elem15);
        }
      }
      struct.setUsesFeatureListIsSet(true);
      struct.minSDK = iprot.readI32();
      struct.setMinSDKIsSet(true);
      struct.targetSDK = iprot.readI32();
      struct.setTargetSDKIsSet(true);
      struct.smallScreen = iprot.readBool();
      struct.setSmallScreenIsSet(true);
      struct.normalScreen = iprot.readBool();
      struct.setNormalScreenIsSet(true);
      struct.largeScreen = iprot.readBool();
      struct.setLargeScreenIsSet(true);
      struct.xlargeScreen = iprot.readBool();
      struct.setXlargeScreenIsSet(true);
      struct.signature = iprot.readString();
      struct.setSignatureIsSet(true);
    }
  }

}

