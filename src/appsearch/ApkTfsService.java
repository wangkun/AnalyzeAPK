/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package appsearch;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ApkTfsService {

  public interface Iface {

    public String ReadApk(String apk_key) throws org.apache.thrift.TException;

    public String WriteApk(String apk_data) throws org.apache.thrift.TException;

    public String IsApkExists(String apt_str) throws org.apache.thrift.TException;

    public void WriteApkAsync(String apk_key, String apk_data) throws org.apache.thrift.TException;

    public List<String> WriteImage(String image_data, String image_url, ImgType img_type) throws org.apache.thrift.TException;

    public String ReadImage(String tfs_key) throws org.apache.thrift.TException;

    public boolean Remove(String tfs_key) throws org.apache.thrift.TException;

    public String IsImageUrlExists(String img_url) throws org.apache.thrift.TException;

    public boolean PushImageTfsKey(String img_url, String image_tfskey) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void ReadApk(String apk_key, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.ReadApk_call> resultHandler) throws org.apache.thrift.TException;

    public void WriteApk(String apk_data, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.WriteApk_call> resultHandler) throws org.apache.thrift.TException;

    public void IsApkExists(String apt_str, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.IsApkExists_call> resultHandler) throws org.apache.thrift.TException;

    public void WriteApkAsync(String apk_key, String apk_data, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.WriteApkAsync_call> resultHandler) throws org.apache.thrift.TException;

    public void WriteImage(String image_data, String image_url, ImgType img_type, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.WriteImage_call> resultHandler) throws org.apache.thrift.TException;

    public void ReadImage(String tfs_key, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.ReadImage_call> resultHandler) throws org.apache.thrift.TException;

    public void Remove(String tfs_key, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.Remove_call> resultHandler) throws org.apache.thrift.TException;

    public void IsImageUrlExists(String img_url, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.IsImageUrlExists_call> resultHandler) throws org.apache.thrift.TException;

    public void PushImageTfsKey(String img_url, String image_tfskey, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.PushImageTfsKey_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public String ReadApk(String apk_key) throws org.apache.thrift.TException
    {
      send_ReadApk(apk_key);
      return recv_ReadApk();
    }

    public void send_ReadApk(String apk_key) throws org.apache.thrift.TException
    {
      ReadApk_args args = new ReadApk_args();
      args.setApk_key(apk_key);
      sendBase("ReadApk", args);
    }

    public String recv_ReadApk() throws org.apache.thrift.TException
    {
      ReadApk_result result = new ReadApk_result();
      receiveBase(result, "ReadApk");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "ReadApk failed: unknown result");
    }

    public String WriteApk(String apk_data) throws org.apache.thrift.TException
    {
      send_WriteApk(apk_data);
      return recv_WriteApk();
    }

    public void send_WriteApk(String apk_data) throws org.apache.thrift.TException
    {
      WriteApk_args args = new WriteApk_args();
      args.setApk_data(apk_data);
      sendBase("WriteApk", args);
    }

    public String recv_WriteApk() throws org.apache.thrift.TException
    {
      WriteApk_result result = new WriteApk_result();
      receiveBase(result, "WriteApk");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "WriteApk failed: unknown result");
    }

    public String IsApkExists(String apt_str) throws org.apache.thrift.TException
    {
      send_IsApkExists(apt_str);
      return recv_IsApkExists();
    }

    public void send_IsApkExists(String apt_str) throws org.apache.thrift.TException
    {
      IsApkExists_args args = new IsApkExists_args();
      args.setApt_str(apt_str);
      sendBase("IsApkExists", args);
    }

    public String recv_IsApkExists() throws org.apache.thrift.TException
    {
      IsApkExists_result result = new IsApkExists_result();
      receiveBase(result, "IsApkExists");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "IsApkExists failed: unknown result");
    }

    public void WriteApkAsync(String apk_key, String apk_data) throws org.apache.thrift.TException
    {
      send_WriteApkAsync(apk_key, apk_data);
      recv_WriteApkAsync();
    }

    public void send_WriteApkAsync(String apk_key, String apk_data) throws org.apache.thrift.TException
    {
      WriteApkAsync_args args = new WriteApkAsync_args();
      args.setApk_key(apk_key);
      args.setApk_data(apk_data);
      sendBase("WriteApkAsync", args);
    }

    public void recv_WriteApkAsync() throws org.apache.thrift.TException
    {
      WriteApkAsync_result result = new WriteApkAsync_result();
      receiveBase(result, "WriteApkAsync");
      return;
    }

    public List<String> WriteImage(String image_data, String image_url, ImgType img_type) throws org.apache.thrift.TException
    {
      send_WriteImage(image_data, image_url, img_type);
      return recv_WriteImage();
    }

    public void send_WriteImage(String image_data, String image_url, ImgType img_type) throws org.apache.thrift.TException
    {
      WriteImage_args args = new WriteImage_args();
      args.setImage_data(image_data);
      args.setImage_url(image_url);
      args.setImg_type(img_type);
      sendBase("WriteImage", args);
    }

    public List<String> recv_WriteImage() throws org.apache.thrift.TException
    {
      WriteImage_result result = new WriteImage_result();
      receiveBase(result, "WriteImage");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "WriteImage failed: unknown result");
    }

    public String ReadImage(String tfs_key) throws org.apache.thrift.TException
    {
      send_ReadImage(tfs_key);
      return recv_ReadImage();
    }

    public void send_ReadImage(String tfs_key) throws org.apache.thrift.TException
    {
      ReadImage_args args = new ReadImage_args();
      args.setTfs_key(tfs_key);
      sendBase("ReadImage", args);
    }

    public String recv_ReadImage() throws org.apache.thrift.TException
    {
      ReadImage_result result = new ReadImage_result();
      receiveBase(result, "ReadImage");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "ReadImage failed: unknown result");
    }

    public boolean Remove(String tfs_key) throws org.apache.thrift.TException
    {
      send_Remove(tfs_key);
      return recv_Remove();
    }

    public void send_Remove(String tfs_key) throws org.apache.thrift.TException
    {
      Remove_args args = new Remove_args();
      args.setTfs_key(tfs_key);
      sendBase("Remove", args);
    }

    public boolean recv_Remove() throws org.apache.thrift.TException
    {
      Remove_result result = new Remove_result();
      receiveBase(result, "Remove");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "Remove failed: unknown result");
    }

    public String IsImageUrlExists(String img_url) throws org.apache.thrift.TException
    {
      send_IsImageUrlExists(img_url);
      return recv_IsImageUrlExists();
    }

    public void send_IsImageUrlExists(String img_url) throws org.apache.thrift.TException
    {
      IsImageUrlExists_args args = new IsImageUrlExists_args();
      args.setImg_url(img_url);
      sendBase("IsImageUrlExists", args);
    }

    public String recv_IsImageUrlExists() throws org.apache.thrift.TException
    {
      IsImageUrlExists_result result = new IsImageUrlExists_result();
      receiveBase(result, "IsImageUrlExists");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "IsImageUrlExists failed: unknown result");
    }

    public boolean PushImageTfsKey(String img_url, String image_tfskey) throws org.apache.thrift.TException
    {
      send_PushImageTfsKey(img_url, image_tfskey);
      return recv_PushImageTfsKey();
    }

    public void send_PushImageTfsKey(String img_url, String image_tfskey) throws org.apache.thrift.TException
    {
      PushImageTfsKey_args args = new PushImageTfsKey_args();
      args.setImg_url(img_url);
      args.setImage_tfskey(image_tfskey);
      sendBase("PushImageTfsKey", args);
    }

    public boolean recv_PushImageTfsKey() throws org.apache.thrift.TException
    {
      PushImageTfsKey_result result = new PushImageTfsKey_result();
      receiveBase(result, "PushImageTfsKey");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "PushImageTfsKey failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void ReadApk(String apk_key, org.apache.thrift.async.AsyncMethodCallback<ReadApk_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      ReadApk_call method_call = new ReadApk_call(apk_key, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class ReadApk_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String apk_key;
      public ReadApk_call(String apk_key, org.apache.thrift.async.AsyncMethodCallback<ReadApk_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.apk_key = apk_key;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ReadApk", org.apache.thrift.protocol.TMessageType.CALL, 0));
        ReadApk_args args = new ReadApk_args();
        args.setApk_key(apk_key);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_ReadApk();
      }
    }

    public void WriteApk(String apk_data, org.apache.thrift.async.AsyncMethodCallback<WriteApk_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      WriteApk_call method_call = new WriteApk_call(apk_data, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class WriteApk_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String apk_data;
      public WriteApk_call(String apk_data, org.apache.thrift.async.AsyncMethodCallback<WriteApk_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.apk_data = apk_data;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("WriteApk", org.apache.thrift.protocol.TMessageType.CALL, 0));
        WriteApk_args args = new WriteApk_args();
        args.setApk_data(apk_data);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_WriteApk();
      }
    }

    public void IsApkExists(String apt_str, org.apache.thrift.async.AsyncMethodCallback<IsApkExists_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      IsApkExists_call method_call = new IsApkExists_call(apt_str, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class IsApkExists_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String apt_str;
      public IsApkExists_call(String apt_str, org.apache.thrift.async.AsyncMethodCallback<IsApkExists_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.apt_str = apt_str;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("IsApkExists", org.apache.thrift.protocol.TMessageType.CALL, 0));
        IsApkExists_args args = new IsApkExists_args();
        args.setApt_str(apt_str);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_IsApkExists();
      }
    }

    public void WriteApkAsync(String apk_key, String apk_data, org.apache.thrift.async.AsyncMethodCallback<WriteApkAsync_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      WriteApkAsync_call method_call = new WriteApkAsync_call(apk_key, apk_data, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class WriteApkAsync_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String apk_key;
      private String apk_data;
      public WriteApkAsync_call(String apk_key, String apk_data, org.apache.thrift.async.AsyncMethodCallback<WriteApkAsync_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.apk_key = apk_key;
        this.apk_data = apk_data;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("WriteApkAsync", org.apache.thrift.protocol.TMessageType.CALL, 0));
        WriteApkAsync_args args = new WriteApkAsync_args();
        args.setApk_key(apk_key);
        args.setApk_data(apk_data);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_WriteApkAsync();
      }
    }

    public void WriteImage(String image_data, String image_url, ImgType img_type, org.apache.thrift.async.AsyncMethodCallback<WriteImage_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      WriteImage_call method_call = new WriteImage_call(image_data, image_url, img_type, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class WriteImage_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String image_data;
      private String image_url;
      private ImgType img_type;
      public WriteImage_call(String image_data, String image_url, ImgType img_type, org.apache.thrift.async.AsyncMethodCallback<WriteImage_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.image_data = image_data;
        this.image_url = image_url;
        this.img_type = img_type;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("WriteImage", org.apache.thrift.protocol.TMessageType.CALL, 0));
        WriteImage_args args = new WriteImage_args();
        args.setImage_data(image_data);
        args.setImage_url(image_url);
        args.setImg_type(img_type);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<String> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_WriteImage();
      }
    }

    public void ReadImage(String tfs_key, org.apache.thrift.async.AsyncMethodCallback<ReadImage_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      ReadImage_call method_call = new ReadImage_call(tfs_key, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class ReadImage_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String tfs_key;
      public ReadImage_call(String tfs_key, org.apache.thrift.async.AsyncMethodCallback<ReadImage_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.tfs_key = tfs_key;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ReadImage", org.apache.thrift.protocol.TMessageType.CALL, 0));
        ReadImage_args args = new ReadImage_args();
        args.setTfs_key(tfs_key);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_ReadImage();
      }
    }

    public void Remove(String tfs_key, org.apache.thrift.async.AsyncMethodCallback<Remove_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      Remove_call method_call = new Remove_call(tfs_key, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class Remove_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String tfs_key;
      public Remove_call(String tfs_key, org.apache.thrift.async.AsyncMethodCallback<Remove_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.tfs_key = tfs_key;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("Remove", org.apache.thrift.protocol.TMessageType.CALL, 0));
        Remove_args args = new Remove_args();
        args.setTfs_key(tfs_key);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_Remove();
      }
    }

    public void IsImageUrlExists(String img_url, org.apache.thrift.async.AsyncMethodCallback<IsImageUrlExists_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      IsImageUrlExists_call method_call = new IsImageUrlExists_call(img_url, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class IsImageUrlExists_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String img_url;
      public IsImageUrlExists_call(String img_url, org.apache.thrift.async.AsyncMethodCallback<IsImageUrlExists_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.img_url = img_url;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("IsImageUrlExists", org.apache.thrift.protocol.TMessageType.CALL, 0));
        IsImageUrlExists_args args = new IsImageUrlExists_args();
        args.setImg_url(img_url);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_IsImageUrlExists();
      }
    }

    public void PushImageTfsKey(String img_url, String image_tfskey, org.apache.thrift.async.AsyncMethodCallback<PushImageTfsKey_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      PushImageTfsKey_call method_call = new PushImageTfsKey_call(img_url, image_tfskey, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class PushImageTfsKey_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String img_url;
      private String image_tfskey;
      public PushImageTfsKey_call(String img_url, String image_tfskey, org.apache.thrift.async.AsyncMethodCallback<PushImageTfsKey_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.img_url = img_url;
        this.image_tfskey = image_tfskey;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("PushImageTfsKey", org.apache.thrift.protocol.TMessageType.CALL, 0));
        PushImageTfsKey_args args = new PushImageTfsKey_args();
        args.setImg_url(img_url);
        args.setImage_tfskey(image_tfskey);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_PushImageTfsKey();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("ReadApk", new ReadApk());
      processMap.put("WriteApk", new WriteApk());
      processMap.put("IsApkExists", new IsApkExists());
      processMap.put("WriteApkAsync", new WriteApkAsync());
      processMap.put("WriteImage", new WriteImage());
      processMap.put("ReadImage", new ReadImage());
      processMap.put("Remove", new Remove());
      processMap.put("IsImageUrlExists", new IsImageUrlExists());
      processMap.put("PushImageTfsKey", new PushImageTfsKey());
      return processMap;
    }

    private static class ReadApk<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ReadApk_args> {
      public ReadApk() {
        super("ReadApk");
      }

      protected ReadApk_args getEmptyArgsInstance() {
        return new ReadApk_args();
      }

      protected ReadApk_result getResult(I iface, ReadApk_args args) throws org.apache.thrift.TException {
        ReadApk_result result = new ReadApk_result();
        result.success = iface.ReadApk(args.apk_key);
        return result;
      }
    }

    private static class WriteApk<I extends Iface> extends org.apache.thrift.ProcessFunction<I, WriteApk_args> {
      public WriteApk() {
        super("WriteApk");
      }

      protected WriteApk_args getEmptyArgsInstance() {
        return new WriteApk_args();
      }

      protected WriteApk_result getResult(I iface, WriteApk_args args) throws org.apache.thrift.TException {
        WriteApk_result result = new WriteApk_result();
        result.success = iface.WriteApk(args.apk_data);
        return result;
      }
    }

    private static class IsApkExists<I extends Iface> extends org.apache.thrift.ProcessFunction<I, IsApkExists_args> {
      public IsApkExists() {
        super("IsApkExists");
      }

      protected IsApkExists_args getEmptyArgsInstance() {
        return new IsApkExists_args();
      }

      protected IsApkExists_result getResult(I iface, IsApkExists_args args) throws org.apache.thrift.TException {
        IsApkExists_result result = new IsApkExists_result();
        result.success = iface.IsApkExists(args.apt_str);
        return result;
      }
    }

    private static class WriteApkAsync<I extends Iface> extends org.apache.thrift.ProcessFunction<I, WriteApkAsync_args> {
      public WriteApkAsync() {
        super("WriteApkAsync");
      }

      protected WriteApkAsync_args getEmptyArgsInstance() {
        return new WriteApkAsync_args();
      }

      protected WriteApkAsync_result getResult(I iface, WriteApkAsync_args args) throws org.apache.thrift.TException {
        WriteApkAsync_result result = new WriteApkAsync_result();
        iface.WriteApkAsync(args.apk_key, args.apk_data);
        return result;
      }
    }

    private static class WriteImage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, WriteImage_args> {
      public WriteImage() {
        super("WriteImage");
      }

      protected WriteImage_args getEmptyArgsInstance() {
        return new WriteImage_args();
      }

      protected WriteImage_result getResult(I iface, WriteImage_args args) throws org.apache.thrift.TException {
        WriteImage_result result = new WriteImage_result();
        result.success = iface.WriteImage(args.image_data, args.image_url, args.img_type);
        return result;
      }
    }

    private static class ReadImage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ReadImage_args> {
      public ReadImage() {
        super("ReadImage");
      }

      protected ReadImage_args getEmptyArgsInstance() {
        return new ReadImage_args();
      }

      protected ReadImage_result getResult(I iface, ReadImage_args args) throws org.apache.thrift.TException {
        ReadImage_result result = new ReadImage_result();
        result.success = iface.ReadImage(args.tfs_key);
        return result;
      }
    }

    private static class Remove<I extends Iface> extends org.apache.thrift.ProcessFunction<I, Remove_args> {
      public Remove() {
        super("Remove");
      }

      protected Remove_args getEmptyArgsInstance() {
        return new Remove_args();
      }

      protected Remove_result getResult(I iface, Remove_args args) throws org.apache.thrift.TException {
        Remove_result result = new Remove_result();
        result.success = iface.Remove(args.tfs_key);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    private static class IsImageUrlExists<I extends Iface> extends org.apache.thrift.ProcessFunction<I, IsImageUrlExists_args> {
      public IsImageUrlExists() {
        super("IsImageUrlExists");
      }

      protected IsImageUrlExists_args getEmptyArgsInstance() {
        return new IsImageUrlExists_args();
      }

      protected IsImageUrlExists_result getResult(I iface, IsImageUrlExists_args args) throws org.apache.thrift.TException {
        IsImageUrlExists_result result = new IsImageUrlExists_result();
        result.success = iface.IsImageUrlExists(args.img_url);
        return result;
      }
    }

    private static class PushImageTfsKey<I extends Iface> extends org.apache.thrift.ProcessFunction<I, PushImageTfsKey_args> {
      public PushImageTfsKey() {
        super("PushImageTfsKey");
      }

      protected PushImageTfsKey_args getEmptyArgsInstance() {
        return new PushImageTfsKey_args();
      }

      protected PushImageTfsKey_result getResult(I iface, PushImageTfsKey_args args) throws org.apache.thrift.TException {
        PushImageTfsKey_result result = new PushImageTfsKey_result();
        result.success = iface.PushImageTfsKey(args.img_url, args.image_tfskey);
        result.setSuccessIsSet(true);
        return result;
      }
    }

  }

  public static class ReadApk_args implements org.apache.thrift.TBase<ReadApk_args, ReadApk_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ReadApk_args");

    private static final org.apache.thrift.protocol.TField APK_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("apk_key", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new ReadApk_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new ReadApk_argsTupleSchemeFactory());
    }

    public String apk_key; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APK_KEY((short)1, "apk_key");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APK_KEY
            return APK_KEY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APK_KEY, new org.apache.thrift.meta_data.FieldMetaData("apk_key", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ReadApk_args.class, metaDataMap);
    }

    public ReadApk_args() {
    }

    public ReadApk_args(
      String apk_key)
    {
      this();
      this.apk_key = apk_key;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ReadApk_args(ReadApk_args other) {
      if (other.isSetApk_key()) {
        this.apk_key = other.apk_key;
      }
    }

    public ReadApk_args deepCopy() {
      return new ReadApk_args(this);
    }

    @Override
    public void clear() {
      this.apk_key = null;
    }

    public String getApk_key() {
      return this.apk_key;
    }

    public ReadApk_args setApk_key(String apk_key) {
      this.apk_key = apk_key;
      return this;
    }

    public void unsetApk_key() {
      this.apk_key = null;
    }

    /** Returns true if field apk_key is set (has been assigned a value) and false otherwise */
    public boolean isSetApk_key() {
      return this.apk_key != null;
    }

    public void setApk_keyIsSet(boolean value) {
      if (!value) {
        this.apk_key = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APK_KEY:
        if (value == null) {
          unsetApk_key();
        } else {
          setApk_key((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APK_KEY:
        return getApk_key();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APK_KEY:
        return isSetApk_key();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ReadApk_args)
        return this.equals((ReadApk_args)that);
      return false;
    }

    public boolean equals(ReadApk_args that) {
      if (that == null)
        return false;

      boolean this_present_apk_key = true && this.isSetApk_key();
      boolean that_present_apk_key = true && that.isSetApk_key();
      if (this_present_apk_key || that_present_apk_key) {
        if (!(this_present_apk_key && that_present_apk_key))
          return false;
        if (!this.apk_key.equals(that.apk_key))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(ReadApk_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      ReadApk_args typedOther = (ReadApk_args)other;

      lastComparison = Boolean.valueOf(isSetApk_key()).compareTo(typedOther.isSetApk_key());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApk_key()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.apk_key, typedOther.apk_key);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ReadApk_args(");
      boolean first = true;

      sb.append("apk_key:");
      if (this.apk_key == null) {
        sb.append("null");
      } else {
        sb.append(this.apk_key);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ReadApk_argsStandardSchemeFactory implements SchemeFactory {
      public ReadApk_argsStandardScheme getScheme() {
        return new ReadApk_argsStandardScheme();
      }
    }

    private static class ReadApk_argsStandardScheme extends StandardScheme<ReadApk_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ReadApk_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // APK_KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.apk_key = iprot.readString();
                struct.setApk_keyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ReadApk_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.apk_key != null) {
          oprot.writeFieldBegin(APK_KEY_FIELD_DESC);
          oprot.writeString(struct.apk_key);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ReadApk_argsTupleSchemeFactory implements SchemeFactory {
      public ReadApk_argsTupleScheme getScheme() {
        return new ReadApk_argsTupleScheme();
      }
    }

    private static class ReadApk_argsTupleScheme extends TupleScheme<ReadApk_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ReadApk_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetApk_key()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetApk_key()) {
          oprot.writeString(struct.apk_key);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ReadApk_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.apk_key = iprot.readString();
          struct.setApk_keyIsSet(true);
        }
      }
    }

  }

  public static class ReadApk_result implements org.apache.thrift.TBase<ReadApk_result, ReadApk_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ReadApk_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new ReadApk_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new ReadApk_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ReadApk_result.class, metaDataMap);
    }

    public ReadApk_result() {
    }

    public ReadApk_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ReadApk_result(ReadApk_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public ReadApk_result deepCopy() {
      return new ReadApk_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public ReadApk_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ReadApk_result)
        return this.equals((ReadApk_result)that);
      return false;
    }

    public boolean equals(ReadApk_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(ReadApk_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      ReadApk_result typedOther = (ReadApk_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ReadApk_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ReadApk_resultStandardSchemeFactory implements SchemeFactory {
      public ReadApk_resultStandardScheme getScheme() {
        return new ReadApk_resultStandardScheme();
      }
    }

    private static class ReadApk_resultStandardScheme extends StandardScheme<ReadApk_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ReadApk_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ReadApk_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ReadApk_resultTupleSchemeFactory implements SchemeFactory {
      public ReadApk_resultTupleScheme getScheme() {
        return new ReadApk_resultTupleScheme();
      }
    }

    private static class ReadApk_resultTupleScheme extends TupleScheme<ReadApk_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ReadApk_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ReadApk_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class WriteApk_args implements org.apache.thrift.TBase<WriteApk_args, WriteApk_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("WriteApk_args");

    private static final org.apache.thrift.protocol.TField APK_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("apk_data", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new WriteApk_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new WriteApk_argsTupleSchemeFactory());
    }

    public String apk_data; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APK_DATA((short)1, "apk_data");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APK_DATA
            return APK_DATA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APK_DATA, new org.apache.thrift.meta_data.FieldMetaData("apk_data", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(WriteApk_args.class, metaDataMap);
    }

    public WriteApk_args() {
    }

    public WriteApk_args(
      String apk_data)
    {
      this();
      this.apk_data = apk_data;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public WriteApk_args(WriteApk_args other) {
      if (other.isSetApk_data()) {
        this.apk_data = other.apk_data;
      }
    }

    public WriteApk_args deepCopy() {
      return new WriteApk_args(this);
    }

    @Override
    public void clear() {
      this.apk_data = null;
    }

    public String getApk_data() {
      return this.apk_data;
    }

    public WriteApk_args setApk_data(String apk_data) {
      this.apk_data = apk_data;
      return this;
    }

    public void unsetApk_data() {
      this.apk_data = null;
    }

    /** Returns true if field apk_data is set (has been assigned a value) and false otherwise */
    public boolean isSetApk_data() {
      return this.apk_data != null;
    }

    public void setApk_dataIsSet(boolean value) {
      if (!value) {
        this.apk_data = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APK_DATA:
        if (value == null) {
          unsetApk_data();
        } else {
          setApk_data((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APK_DATA:
        return getApk_data();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APK_DATA:
        return isSetApk_data();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof WriteApk_args)
        return this.equals((WriteApk_args)that);
      return false;
    }

    public boolean equals(WriteApk_args that) {
      if (that == null)
        return false;

      boolean this_present_apk_data = true && this.isSetApk_data();
      boolean that_present_apk_data = true && that.isSetApk_data();
      if (this_present_apk_data || that_present_apk_data) {
        if (!(this_present_apk_data && that_present_apk_data))
          return false;
        if (!this.apk_data.equals(that.apk_data))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(WriteApk_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      WriteApk_args typedOther = (WriteApk_args)other;

      lastComparison = Boolean.valueOf(isSetApk_data()).compareTo(typedOther.isSetApk_data());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApk_data()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.apk_data, typedOther.apk_data);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("WriteApk_args(");
      boolean first = true;

      sb.append("apk_data:");
      if (this.apk_data == null) {
        sb.append("null");
      } else {
        sb.append(this.apk_data);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class WriteApk_argsStandardSchemeFactory implements SchemeFactory {
      public WriteApk_argsStandardScheme getScheme() {
        return new WriteApk_argsStandardScheme();
      }
    }

    private static class WriteApk_argsStandardScheme extends StandardScheme<WriteApk_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, WriteApk_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // APK_DATA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.apk_data = iprot.readString();
                struct.setApk_dataIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, WriteApk_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.apk_data != null) {
          oprot.writeFieldBegin(APK_DATA_FIELD_DESC);
          oprot.writeString(struct.apk_data);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class WriteApk_argsTupleSchemeFactory implements SchemeFactory {
      public WriteApk_argsTupleScheme getScheme() {
        return new WriteApk_argsTupleScheme();
      }
    }

    private static class WriteApk_argsTupleScheme extends TupleScheme<WriteApk_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, WriteApk_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetApk_data()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetApk_data()) {
          oprot.writeString(struct.apk_data);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, WriteApk_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.apk_data = iprot.readString();
          struct.setApk_dataIsSet(true);
        }
      }
    }

  }

  public static class WriteApk_result implements org.apache.thrift.TBase<WriteApk_result, WriteApk_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("WriteApk_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new WriteApk_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new WriteApk_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(WriteApk_result.class, metaDataMap);
    }

    public WriteApk_result() {
    }

    public WriteApk_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public WriteApk_result(WriteApk_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public WriteApk_result deepCopy() {
      return new WriteApk_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public WriteApk_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof WriteApk_result)
        return this.equals((WriteApk_result)that);
      return false;
    }

    public boolean equals(WriteApk_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(WriteApk_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      WriteApk_result typedOther = (WriteApk_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("WriteApk_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class WriteApk_resultStandardSchemeFactory implements SchemeFactory {
      public WriteApk_resultStandardScheme getScheme() {
        return new WriteApk_resultStandardScheme();
      }
    }

    private static class WriteApk_resultStandardScheme extends StandardScheme<WriteApk_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, WriteApk_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, WriteApk_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class WriteApk_resultTupleSchemeFactory implements SchemeFactory {
      public WriteApk_resultTupleScheme getScheme() {
        return new WriteApk_resultTupleScheme();
      }
    }

    private static class WriteApk_resultTupleScheme extends TupleScheme<WriteApk_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, WriteApk_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, WriteApk_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class IsApkExists_args implements org.apache.thrift.TBase<IsApkExists_args, IsApkExists_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("IsApkExists_args");

    private static final org.apache.thrift.protocol.TField APT_STR_FIELD_DESC = new org.apache.thrift.protocol.TField("apt_str", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new IsApkExists_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new IsApkExists_argsTupleSchemeFactory());
    }

    public String apt_str; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APT_STR((short)1, "apt_str");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APT_STR
            return APT_STR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APT_STR, new org.apache.thrift.meta_data.FieldMetaData("apt_str", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(IsApkExists_args.class, metaDataMap);
    }

    public IsApkExists_args() {
    }

    public IsApkExists_args(
      String apt_str)
    {
      this();
      this.apt_str = apt_str;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public IsApkExists_args(IsApkExists_args other) {
      if (other.isSetApt_str()) {
        this.apt_str = other.apt_str;
      }
    }

    public IsApkExists_args deepCopy() {
      return new IsApkExists_args(this);
    }

    @Override
    public void clear() {
      this.apt_str = null;
    }

    public String getApt_str() {
      return this.apt_str;
    }

    public IsApkExists_args setApt_str(String apt_str) {
      this.apt_str = apt_str;
      return this;
    }

    public void unsetApt_str() {
      this.apt_str = null;
    }

    /** Returns true if field apt_str is set (has been assigned a value) and false otherwise */
    public boolean isSetApt_str() {
      return this.apt_str != null;
    }

    public void setApt_strIsSet(boolean value) {
      if (!value) {
        this.apt_str = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APT_STR:
        if (value == null) {
          unsetApt_str();
        } else {
          setApt_str((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APT_STR:
        return getApt_str();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APT_STR:
        return isSetApt_str();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof IsApkExists_args)
        return this.equals((IsApkExists_args)that);
      return false;
    }

    public boolean equals(IsApkExists_args that) {
      if (that == null)
        return false;

      boolean this_present_apt_str = true && this.isSetApt_str();
      boolean that_present_apt_str = true && that.isSetApt_str();
      if (this_present_apt_str || that_present_apt_str) {
        if (!(this_present_apt_str && that_present_apt_str))
          return false;
        if (!this.apt_str.equals(that.apt_str))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(IsApkExists_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      IsApkExists_args typedOther = (IsApkExists_args)other;

      lastComparison = Boolean.valueOf(isSetApt_str()).compareTo(typedOther.isSetApt_str());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApt_str()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.apt_str, typedOther.apt_str);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("IsApkExists_args(");
      boolean first = true;

      sb.append("apt_str:");
      if (this.apt_str == null) {
        sb.append("null");
      } else {
        sb.append(this.apt_str);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class IsApkExists_argsStandardSchemeFactory implements SchemeFactory {
      public IsApkExists_argsStandardScheme getScheme() {
        return new IsApkExists_argsStandardScheme();
      }
    }

    private static class IsApkExists_argsStandardScheme extends StandardScheme<IsApkExists_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, IsApkExists_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // APT_STR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.apt_str = iprot.readString();
                struct.setApt_strIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, IsApkExists_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.apt_str != null) {
          oprot.writeFieldBegin(APT_STR_FIELD_DESC);
          oprot.writeString(struct.apt_str);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class IsApkExists_argsTupleSchemeFactory implements SchemeFactory {
      public IsApkExists_argsTupleScheme getScheme() {
        return new IsApkExists_argsTupleScheme();
      }
    }

    private static class IsApkExists_argsTupleScheme extends TupleScheme<IsApkExists_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, IsApkExists_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetApt_str()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetApt_str()) {
          oprot.writeString(struct.apt_str);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, IsApkExists_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.apt_str = iprot.readString();
          struct.setApt_strIsSet(true);
        }
      }
    }

  }

  public static class IsApkExists_result implements org.apache.thrift.TBase<IsApkExists_result, IsApkExists_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("IsApkExists_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new IsApkExists_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new IsApkExists_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(IsApkExists_result.class, metaDataMap);
    }

    public IsApkExists_result() {
    }

    public IsApkExists_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public IsApkExists_result(IsApkExists_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public IsApkExists_result deepCopy() {
      return new IsApkExists_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public IsApkExists_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof IsApkExists_result)
        return this.equals((IsApkExists_result)that);
      return false;
    }

    public boolean equals(IsApkExists_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(IsApkExists_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      IsApkExists_result typedOther = (IsApkExists_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("IsApkExists_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class IsApkExists_resultStandardSchemeFactory implements SchemeFactory {
      public IsApkExists_resultStandardScheme getScheme() {
        return new IsApkExists_resultStandardScheme();
      }
    }

    private static class IsApkExists_resultStandardScheme extends StandardScheme<IsApkExists_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, IsApkExists_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, IsApkExists_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class IsApkExists_resultTupleSchemeFactory implements SchemeFactory {
      public IsApkExists_resultTupleScheme getScheme() {
        return new IsApkExists_resultTupleScheme();
      }
    }

    private static class IsApkExists_resultTupleScheme extends TupleScheme<IsApkExists_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, IsApkExists_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, IsApkExists_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class WriteApkAsync_args implements org.apache.thrift.TBase<WriteApkAsync_args, WriteApkAsync_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("WriteApkAsync_args");

    private static final org.apache.thrift.protocol.TField APK_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("apk_key", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField APK_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("apk_data", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new WriteApkAsync_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new WriteApkAsync_argsTupleSchemeFactory());
    }

    public String apk_key; // required
    public String apk_data; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      APK_KEY((short)1, "apk_key"),
      APK_DATA((short)2, "apk_data");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // APK_KEY
            return APK_KEY;
          case 2: // APK_DATA
            return APK_DATA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.APK_KEY, new org.apache.thrift.meta_data.FieldMetaData("apk_key", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.APK_DATA, new org.apache.thrift.meta_data.FieldMetaData("apk_data", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(WriteApkAsync_args.class, metaDataMap);
    }

    public WriteApkAsync_args() {
    }

    public WriteApkAsync_args(
      String apk_key,
      String apk_data)
    {
      this();
      this.apk_key = apk_key;
      this.apk_data = apk_data;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public WriteApkAsync_args(WriteApkAsync_args other) {
      if (other.isSetApk_key()) {
        this.apk_key = other.apk_key;
      }
      if (other.isSetApk_data()) {
        this.apk_data = other.apk_data;
      }
    }

    public WriteApkAsync_args deepCopy() {
      return new WriteApkAsync_args(this);
    }

    @Override
    public void clear() {
      this.apk_key = null;
      this.apk_data = null;
    }

    public String getApk_key() {
      return this.apk_key;
    }

    public WriteApkAsync_args setApk_key(String apk_key) {
      this.apk_key = apk_key;
      return this;
    }

    public void unsetApk_key() {
      this.apk_key = null;
    }

    /** Returns true if field apk_key is set (has been assigned a value) and false otherwise */
    public boolean isSetApk_key() {
      return this.apk_key != null;
    }

    public void setApk_keyIsSet(boolean value) {
      if (!value) {
        this.apk_key = null;
      }
    }

    public String getApk_data() {
      return this.apk_data;
    }

    public WriteApkAsync_args setApk_data(String apk_data) {
      this.apk_data = apk_data;
      return this;
    }

    public void unsetApk_data() {
      this.apk_data = null;
    }

    /** Returns true if field apk_data is set (has been assigned a value) and false otherwise */
    public boolean isSetApk_data() {
      return this.apk_data != null;
    }

    public void setApk_dataIsSet(boolean value) {
      if (!value) {
        this.apk_data = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case APK_KEY:
        if (value == null) {
          unsetApk_key();
        } else {
          setApk_key((String)value);
        }
        break;

      case APK_DATA:
        if (value == null) {
          unsetApk_data();
        } else {
          setApk_data((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case APK_KEY:
        return getApk_key();

      case APK_DATA:
        return getApk_data();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case APK_KEY:
        return isSetApk_key();
      case APK_DATA:
        return isSetApk_data();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof WriteApkAsync_args)
        return this.equals((WriteApkAsync_args)that);
      return false;
    }

    public boolean equals(WriteApkAsync_args that) {
      if (that == null)
        return false;

      boolean this_present_apk_key = true && this.isSetApk_key();
      boolean that_present_apk_key = true && that.isSetApk_key();
      if (this_present_apk_key || that_present_apk_key) {
        if (!(this_present_apk_key && that_present_apk_key))
          return false;
        if (!this.apk_key.equals(that.apk_key))
          return false;
      }

      boolean this_present_apk_data = true && this.isSetApk_data();
      boolean that_present_apk_data = true && that.isSetApk_data();
      if (this_present_apk_data || that_present_apk_data) {
        if (!(this_present_apk_data && that_present_apk_data))
          return false;
        if (!this.apk_data.equals(that.apk_data))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(WriteApkAsync_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      WriteApkAsync_args typedOther = (WriteApkAsync_args)other;

      lastComparison = Boolean.valueOf(isSetApk_key()).compareTo(typedOther.isSetApk_key());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApk_key()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.apk_key, typedOther.apk_key);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetApk_data()).compareTo(typedOther.isSetApk_data());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApk_data()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.apk_data, typedOther.apk_data);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("WriteApkAsync_args(");
      boolean first = true;

      sb.append("apk_key:");
      if (this.apk_key == null) {
        sb.append("null");
      } else {
        sb.append(this.apk_key);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("apk_data:");
      if (this.apk_data == null) {
        sb.append("null");
      } else {
        sb.append(this.apk_data);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class WriteApkAsync_argsStandardSchemeFactory implements SchemeFactory {
      public WriteApkAsync_argsStandardScheme getScheme() {
        return new WriteApkAsync_argsStandardScheme();
      }
    }

    private static class WriteApkAsync_argsStandardScheme extends StandardScheme<WriteApkAsync_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, WriteApkAsync_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // APK_KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.apk_key = iprot.readString();
                struct.setApk_keyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // APK_DATA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.apk_data = iprot.readString();
                struct.setApk_dataIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, WriteApkAsync_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.apk_key != null) {
          oprot.writeFieldBegin(APK_KEY_FIELD_DESC);
          oprot.writeString(struct.apk_key);
          oprot.writeFieldEnd();
        }
        if (struct.apk_data != null) {
          oprot.writeFieldBegin(APK_DATA_FIELD_DESC);
          oprot.writeString(struct.apk_data);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class WriteApkAsync_argsTupleSchemeFactory implements SchemeFactory {
      public WriteApkAsync_argsTupleScheme getScheme() {
        return new WriteApkAsync_argsTupleScheme();
      }
    }

    private static class WriteApkAsync_argsTupleScheme extends TupleScheme<WriteApkAsync_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, WriteApkAsync_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetApk_key()) {
          optionals.set(0);
        }
        if (struct.isSetApk_data()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetApk_key()) {
          oprot.writeString(struct.apk_key);
        }
        if (struct.isSetApk_data()) {
          oprot.writeString(struct.apk_data);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, WriteApkAsync_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.apk_key = iprot.readString();
          struct.setApk_keyIsSet(true);
        }
        if (incoming.get(1)) {
          struct.apk_data = iprot.readString();
          struct.setApk_dataIsSet(true);
        }
      }
    }

  }

  public static class WriteApkAsync_result implements org.apache.thrift.TBase<WriteApkAsync_result, WriteApkAsync_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("WriteApkAsync_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new WriteApkAsync_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new WriteApkAsync_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(WriteApkAsync_result.class, metaDataMap);
    }

    public WriteApkAsync_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public WriteApkAsync_result(WriteApkAsync_result other) {
    }

    public WriteApkAsync_result deepCopy() {
      return new WriteApkAsync_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof WriteApkAsync_result)
        return this.equals((WriteApkAsync_result)that);
      return false;
    }

    public boolean equals(WriteApkAsync_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(WriteApkAsync_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      WriteApkAsync_result typedOther = (WriteApkAsync_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("WriteApkAsync_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class WriteApkAsync_resultStandardSchemeFactory implements SchemeFactory {
      public WriteApkAsync_resultStandardScheme getScheme() {
        return new WriteApkAsync_resultStandardScheme();
      }
    }

    private static class WriteApkAsync_resultStandardScheme extends StandardScheme<WriteApkAsync_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, WriteApkAsync_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, WriteApkAsync_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class WriteApkAsync_resultTupleSchemeFactory implements SchemeFactory {
      public WriteApkAsync_resultTupleScheme getScheme() {
        return new WriteApkAsync_resultTupleScheme();
      }
    }

    private static class WriteApkAsync_resultTupleScheme extends TupleScheme<WriteApkAsync_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, WriteApkAsync_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, WriteApkAsync_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class WriteImage_args implements org.apache.thrift.TBase<WriteImage_args, WriteImage_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("WriteImage_args");

    private static final org.apache.thrift.protocol.TField IMAGE_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("image_data", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField IMAGE_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("image_url", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField IMG_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("img_type", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new WriteImage_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new WriteImage_argsTupleSchemeFactory());
    }

    public String image_data; // required
    public String image_url; // required
    /**
     * 
     * @see ImgType
     */
    public ImgType img_type; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      IMAGE_DATA((short)1, "image_data"),
      IMAGE_URL((short)2, "image_url"),
      /**
       * 
       * @see ImgType
       */
      IMG_TYPE((short)3, "img_type");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IMAGE_DATA
            return IMAGE_DATA;
          case 2: // IMAGE_URL
            return IMAGE_URL;
          case 3: // IMG_TYPE
            return IMG_TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IMAGE_DATA, new org.apache.thrift.meta_data.FieldMetaData("image_data", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.IMAGE_URL, new org.apache.thrift.meta_data.FieldMetaData("image_url", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.IMG_TYPE, new org.apache.thrift.meta_data.FieldMetaData("img_type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ImgType.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(WriteImage_args.class, metaDataMap);
    }

    public WriteImage_args() {
    }

    public WriteImage_args(
      String image_data,
      String image_url,
      ImgType img_type)
    {
      this();
      this.image_data = image_data;
      this.image_url = image_url;
      this.img_type = img_type;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public WriteImage_args(WriteImage_args other) {
      if (other.isSetImage_data()) {
        this.image_data = other.image_data;
      }
      if (other.isSetImage_url()) {
        this.image_url = other.image_url;
      }
      if (other.isSetImg_type()) {
        this.img_type = other.img_type;
      }
    }

    public WriteImage_args deepCopy() {
      return new WriteImage_args(this);
    }

    @Override
    public void clear() {
      this.image_data = null;
      this.image_url = null;
      this.img_type = null;
    }

    public String getImage_data() {
      return this.image_data;
    }

    public WriteImage_args setImage_data(String image_data) {
      this.image_data = image_data;
      return this;
    }

    public void unsetImage_data() {
      this.image_data = null;
    }

    /** Returns true if field image_data is set (has been assigned a value) and false otherwise */
    public boolean isSetImage_data() {
      return this.image_data != null;
    }

    public void setImage_dataIsSet(boolean value) {
      if (!value) {
        this.image_data = null;
      }
    }

    public String getImage_url() {
      return this.image_url;
    }

    public WriteImage_args setImage_url(String image_url) {
      this.image_url = image_url;
      return this;
    }

    public void unsetImage_url() {
      this.image_url = null;
    }

    /** Returns true if field image_url is set (has been assigned a value) and false otherwise */
    public boolean isSetImage_url() {
      return this.image_url != null;
    }

    public void setImage_urlIsSet(boolean value) {
      if (!value) {
        this.image_url = null;
      }
    }

    /**
     * 
     * @see ImgType
     */
    public ImgType getImg_type() {
      return this.img_type;
    }

    /**
     * 
     * @see ImgType
     */
    public WriteImage_args setImg_type(ImgType img_type) {
      this.img_type = img_type;
      return this;
    }

    public void unsetImg_type() {
      this.img_type = null;
    }

    /** Returns true if field img_type is set (has been assigned a value) and false otherwise */
    public boolean isSetImg_type() {
      return this.img_type != null;
    }

    public void setImg_typeIsSet(boolean value) {
      if (!value) {
        this.img_type = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case IMAGE_DATA:
        if (value == null) {
          unsetImage_data();
        } else {
          setImage_data((String)value);
        }
        break;

      case IMAGE_URL:
        if (value == null) {
          unsetImage_url();
        } else {
          setImage_url((String)value);
        }
        break;

      case IMG_TYPE:
        if (value == null) {
          unsetImg_type();
        } else {
          setImg_type((ImgType)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case IMAGE_DATA:
        return getImage_data();

      case IMAGE_URL:
        return getImage_url();

      case IMG_TYPE:
        return getImg_type();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case IMAGE_DATA:
        return isSetImage_data();
      case IMAGE_URL:
        return isSetImage_url();
      case IMG_TYPE:
        return isSetImg_type();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof WriteImage_args)
        return this.equals((WriteImage_args)that);
      return false;
    }

    public boolean equals(WriteImage_args that) {
      if (that == null)
        return false;

      boolean this_present_image_data = true && this.isSetImage_data();
      boolean that_present_image_data = true && that.isSetImage_data();
      if (this_present_image_data || that_present_image_data) {
        if (!(this_present_image_data && that_present_image_data))
          return false;
        if (!this.image_data.equals(that.image_data))
          return false;
      }

      boolean this_present_image_url = true && this.isSetImage_url();
      boolean that_present_image_url = true && that.isSetImage_url();
      if (this_present_image_url || that_present_image_url) {
        if (!(this_present_image_url && that_present_image_url))
          return false;
        if (!this.image_url.equals(that.image_url))
          return false;
      }

      boolean this_present_img_type = true && this.isSetImg_type();
      boolean that_present_img_type = true && that.isSetImg_type();
      if (this_present_img_type || that_present_img_type) {
        if (!(this_present_img_type && that_present_img_type))
          return false;
        if (!this.img_type.equals(that.img_type))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(WriteImage_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      WriteImage_args typedOther = (WriteImage_args)other;

      lastComparison = Boolean.valueOf(isSetImage_data()).compareTo(typedOther.isSetImage_data());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetImage_data()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.image_data, typedOther.image_data);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetImage_url()).compareTo(typedOther.isSetImage_url());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetImage_url()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.image_url, typedOther.image_url);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetImg_type()).compareTo(typedOther.isSetImg_type());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetImg_type()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.img_type, typedOther.img_type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("WriteImage_args(");
      boolean first = true;

      sb.append("image_data:");
      if (this.image_data == null) {
        sb.append("null");
      } else {
        sb.append(this.image_data);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("image_url:");
      if (this.image_url == null) {
        sb.append("null");
      } else {
        sb.append(this.image_url);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("img_type:");
      if (this.img_type == null) {
        sb.append("null");
      } else {
        sb.append(this.img_type);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class WriteImage_argsStandardSchemeFactory implements SchemeFactory {
      public WriteImage_argsStandardScheme getScheme() {
        return new WriteImage_argsStandardScheme();
      }
    }

    private static class WriteImage_argsStandardScheme extends StandardScheme<WriteImage_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, WriteImage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // IMAGE_DATA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.image_data = iprot.readString();
                struct.setImage_dataIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // IMAGE_URL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.image_url = iprot.readString();
                struct.setImage_urlIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // IMG_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.img_type = ImgType.findByValue(iprot.readI32());
                struct.setImg_typeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, WriteImage_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.image_data != null) {
          oprot.writeFieldBegin(IMAGE_DATA_FIELD_DESC);
          oprot.writeString(struct.image_data);
          oprot.writeFieldEnd();
        }
        if (struct.image_url != null) {
          oprot.writeFieldBegin(IMAGE_URL_FIELD_DESC);
          oprot.writeString(struct.image_url);
          oprot.writeFieldEnd();
        }
        if (struct.img_type != null) {
          oprot.writeFieldBegin(IMG_TYPE_FIELD_DESC);
          oprot.writeI32(struct.img_type.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class WriteImage_argsTupleSchemeFactory implements SchemeFactory {
      public WriteImage_argsTupleScheme getScheme() {
        return new WriteImage_argsTupleScheme();
      }
    }

    private static class WriteImage_argsTupleScheme extends TupleScheme<WriteImage_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, WriteImage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetImage_data()) {
          optionals.set(0);
        }
        if (struct.isSetImage_url()) {
          optionals.set(1);
        }
        if (struct.isSetImg_type()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetImage_data()) {
          oprot.writeString(struct.image_data);
        }
        if (struct.isSetImage_url()) {
          oprot.writeString(struct.image_url);
        }
        if (struct.isSetImg_type()) {
          oprot.writeI32(struct.img_type.getValue());
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, WriteImage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.image_data = iprot.readString();
          struct.setImage_dataIsSet(true);
        }
        if (incoming.get(1)) {
          struct.image_url = iprot.readString();
          struct.setImage_urlIsSet(true);
        }
        if (incoming.get(2)) {
          struct.img_type = ImgType.findByValue(iprot.readI32());
          struct.setImg_typeIsSet(true);
        }
      }
    }

  }

  public static class WriteImage_result implements org.apache.thrift.TBase<WriteImage_result, WriteImage_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("WriteImage_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new WriteImage_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new WriteImage_resultTupleSchemeFactory());
    }

    public List<String> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(WriteImage_result.class, metaDataMap);
    }

    public WriteImage_result() {
    }

    public WriteImage_result(
      List<String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public WriteImage_result(WriteImage_result other) {
      if (other.isSetSuccess()) {
        List<String> __this__success = new ArrayList<String>();
        for (String other_element : other.success) {
          __this__success.add(other_element);
        }
        this.success = __this__success;
      }
    }

    public WriteImage_result deepCopy() {
      return new WriteImage_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new ArrayList<String>();
      }
      this.success.add(elem);
    }

    public List<String> getSuccess() {
      return this.success;
    }

    public WriteImage_result setSuccess(List<String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof WriteImage_result)
        return this.equals((WriteImage_result)that);
      return false;
    }

    public boolean equals(WriteImage_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(WriteImage_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      WriteImage_result typedOther = (WriteImage_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("WriteImage_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class WriteImage_resultStandardSchemeFactory implements SchemeFactory {
      public WriteImage_resultStandardScheme getScheme() {
        return new WriteImage_resultStandardScheme();
      }
    }

    private static class WriteImage_resultStandardScheme extends StandardScheme<WriteImage_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, WriteImage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.success = new ArrayList<String>(_list0.size);
                  for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                  {
                    String _elem2; // required
                    _elem2 = iprot.readString();
                    struct.success.add(_elem2);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, WriteImage_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (String _iter3 : struct.success)
            {
              oprot.writeString(_iter3);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class WriteImage_resultTupleSchemeFactory implements SchemeFactory {
      public WriteImage_resultTupleScheme getScheme() {
        return new WriteImage_resultTupleScheme();
      }
    }

    private static class WriteImage_resultTupleScheme extends TupleScheme<WriteImage_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, WriteImage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (String _iter4 : struct.success)
            {
              oprot.writeString(_iter4);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, WriteImage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new ArrayList<String>(_list5.size);
            for (int _i6 = 0; _i6 < _list5.size; ++_i6)
            {
              String _elem7; // required
              _elem7 = iprot.readString();
              struct.success.add(_elem7);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class ReadImage_args implements org.apache.thrift.TBase<ReadImage_args, ReadImage_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ReadImage_args");

    private static final org.apache.thrift.protocol.TField TFS_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("tfs_key", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new ReadImage_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new ReadImage_argsTupleSchemeFactory());
    }

    public String tfs_key; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TFS_KEY((short)1, "tfs_key");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TFS_KEY
            return TFS_KEY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TFS_KEY, new org.apache.thrift.meta_data.FieldMetaData("tfs_key", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ReadImage_args.class, metaDataMap);
    }

    public ReadImage_args() {
    }

    public ReadImage_args(
      String tfs_key)
    {
      this();
      this.tfs_key = tfs_key;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ReadImage_args(ReadImage_args other) {
      if (other.isSetTfs_key()) {
        this.tfs_key = other.tfs_key;
      }
    }

    public ReadImage_args deepCopy() {
      return new ReadImage_args(this);
    }

    @Override
    public void clear() {
      this.tfs_key = null;
    }

    public String getTfs_key() {
      return this.tfs_key;
    }

    public ReadImage_args setTfs_key(String tfs_key) {
      this.tfs_key = tfs_key;
      return this;
    }

    public void unsetTfs_key() {
      this.tfs_key = null;
    }

    /** Returns true if field tfs_key is set (has been assigned a value) and false otherwise */
    public boolean isSetTfs_key() {
      return this.tfs_key != null;
    }

    public void setTfs_keyIsSet(boolean value) {
      if (!value) {
        this.tfs_key = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TFS_KEY:
        if (value == null) {
          unsetTfs_key();
        } else {
          setTfs_key((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TFS_KEY:
        return getTfs_key();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TFS_KEY:
        return isSetTfs_key();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ReadImage_args)
        return this.equals((ReadImage_args)that);
      return false;
    }

    public boolean equals(ReadImage_args that) {
      if (that == null)
        return false;

      boolean this_present_tfs_key = true && this.isSetTfs_key();
      boolean that_present_tfs_key = true && that.isSetTfs_key();
      if (this_present_tfs_key || that_present_tfs_key) {
        if (!(this_present_tfs_key && that_present_tfs_key))
          return false;
        if (!this.tfs_key.equals(that.tfs_key))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(ReadImage_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      ReadImage_args typedOther = (ReadImage_args)other;

      lastComparison = Boolean.valueOf(isSetTfs_key()).compareTo(typedOther.isSetTfs_key());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTfs_key()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tfs_key, typedOther.tfs_key);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ReadImage_args(");
      boolean first = true;

      sb.append("tfs_key:");
      if (this.tfs_key == null) {
        sb.append("null");
      } else {
        sb.append(this.tfs_key);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ReadImage_argsStandardSchemeFactory implements SchemeFactory {
      public ReadImage_argsStandardScheme getScheme() {
        return new ReadImage_argsStandardScheme();
      }
    }

    private static class ReadImage_argsStandardScheme extends StandardScheme<ReadImage_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ReadImage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TFS_KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.tfs_key = iprot.readString();
                struct.setTfs_keyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ReadImage_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.tfs_key != null) {
          oprot.writeFieldBegin(TFS_KEY_FIELD_DESC);
          oprot.writeString(struct.tfs_key);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ReadImage_argsTupleSchemeFactory implements SchemeFactory {
      public ReadImage_argsTupleScheme getScheme() {
        return new ReadImage_argsTupleScheme();
      }
    }

    private static class ReadImage_argsTupleScheme extends TupleScheme<ReadImage_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ReadImage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTfs_key()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTfs_key()) {
          oprot.writeString(struct.tfs_key);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ReadImage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.tfs_key = iprot.readString();
          struct.setTfs_keyIsSet(true);
        }
      }
    }

  }

  public static class ReadImage_result implements org.apache.thrift.TBase<ReadImage_result, ReadImage_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ReadImage_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new ReadImage_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new ReadImage_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ReadImage_result.class, metaDataMap);
    }

    public ReadImage_result() {
    }

    public ReadImage_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ReadImage_result(ReadImage_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public ReadImage_result deepCopy() {
      return new ReadImage_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public ReadImage_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ReadImage_result)
        return this.equals((ReadImage_result)that);
      return false;
    }

    public boolean equals(ReadImage_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(ReadImage_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      ReadImage_result typedOther = (ReadImage_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ReadImage_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ReadImage_resultStandardSchemeFactory implements SchemeFactory {
      public ReadImage_resultStandardScheme getScheme() {
        return new ReadImage_resultStandardScheme();
      }
    }

    private static class ReadImage_resultStandardScheme extends StandardScheme<ReadImage_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ReadImage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ReadImage_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ReadImage_resultTupleSchemeFactory implements SchemeFactory {
      public ReadImage_resultTupleScheme getScheme() {
        return new ReadImage_resultTupleScheme();
      }
    }

    private static class ReadImage_resultTupleScheme extends TupleScheme<ReadImage_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ReadImage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ReadImage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class Remove_args implements org.apache.thrift.TBase<Remove_args, Remove_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Remove_args");

    private static final org.apache.thrift.protocol.TField TFS_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("tfs_key", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new Remove_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new Remove_argsTupleSchemeFactory());
    }

    public String tfs_key; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TFS_KEY((short)1, "tfs_key");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TFS_KEY
            return TFS_KEY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TFS_KEY, new org.apache.thrift.meta_data.FieldMetaData("tfs_key", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Remove_args.class, metaDataMap);
    }

    public Remove_args() {
    }

    public Remove_args(
      String tfs_key)
    {
      this();
      this.tfs_key = tfs_key;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Remove_args(Remove_args other) {
      if (other.isSetTfs_key()) {
        this.tfs_key = other.tfs_key;
      }
    }

    public Remove_args deepCopy() {
      return new Remove_args(this);
    }

    @Override
    public void clear() {
      this.tfs_key = null;
    }

    public String getTfs_key() {
      return this.tfs_key;
    }

    public Remove_args setTfs_key(String tfs_key) {
      this.tfs_key = tfs_key;
      return this;
    }

    public void unsetTfs_key() {
      this.tfs_key = null;
    }

    /** Returns true if field tfs_key is set (has been assigned a value) and false otherwise */
    public boolean isSetTfs_key() {
      return this.tfs_key != null;
    }

    public void setTfs_keyIsSet(boolean value) {
      if (!value) {
        this.tfs_key = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TFS_KEY:
        if (value == null) {
          unsetTfs_key();
        } else {
          setTfs_key((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TFS_KEY:
        return getTfs_key();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TFS_KEY:
        return isSetTfs_key();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof Remove_args)
        return this.equals((Remove_args)that);
      return false;
    }

    public boolean equals(Remove_args that) {
      if (that == null)
        return false;

      boolean this_present_tfs_key = true && this.isSetTfs_key();
      boolean that_present_tfs_key = true && that.isSetTfs_key();
      if (this_present_tfs_key || that_present_tfs_key) {
        if (!(this_present_tfs_key && that_present_tfs_key))
          return false;
        if (!this.tfs_key.equals(that.tfs_key))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(Remove_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      Remove_args typedOther = (Remove_args)other;

      lastComparison = Boolean.valueOf(isSetTfs_key()).compareTo(typedOther.isSetTfs_key());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTfs_key()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tfs_key, typedOther.tfs_key);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("Remove_args(");
      boolean first = true;

      sb.append("tfs_key:");
      if (this.tfs_key == null) {
        sb.append("null");
      } else {
        sb.append(this.tfs_key);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Remove_argsStandardSchemeFactory implements SchemeFactory {
      public Remove_argsStandardScheme getScheme() {
        return new Remove_argsStandardScheme();
      }
    }

    private static class Remove_argsStandardScheme extends StandardScheme<Remove_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, Remove_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TFS_KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.tfs_key = iprot.readString();
                struct.setTfs_keyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, Remove_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.tfs_key != null) {
          oprot.writeFieldBegin(TFS_KEY_FIELD_DESC);
          oprot.writeString(struct.tfs_key);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Remove_argsTupleSchemeFactory implements SchemeFactory {
      public Remove_argsTupleScheme getScheme() {
        return new Remove_argsTupleScheme();
      }
    }

    private static class Remove_argsTupleScheme extends TupleScheme<Remove_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Remove_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTfs_key()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTfs_key()) {
          oprot.writeString(struct.tfs_key);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Remove_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.tfs_key = iprot.readString();
          struct.setTfs_keyIsSet(true);
        }
      }
    }

  }

  public static class Remove_result implements org.apache.thrift.TBase<Remove_result, Remove_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Remove_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new Remove_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new Remove_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Remove_result.class, metaDataMap);
    }

    public Remove_result() {
    }

    public Remove_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Remove_result(Remove_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public Remove_result deepCopy() {
      return new Remove_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public Remove_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof Remove_result)
        return this.equals((Remove_result)that);
      return false;
    }

    public boolean equals(Remove_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(Remove_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      Remove_result typedOther = (Remove_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("Remove_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Remove_resultStandardSchemeFactory implements SchemeFactory {
      public Remove_resultStandardScheme getScheme() {
        return new Remove_resultStandardScheme();
      }
    }

    private static class Remove_resultStandardScheme extends StandardScheme<Remove_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, Remove_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, Remove_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Remove_resultTupleSchemeFactory implements SchemeFactory {
      public Remove_resultTupleScheme getScheme() {
        return new Remove_resultTupleScheme();
      }
    }

    private static class Remove_resultTupleScheme extends TupleScheme<Remove_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Remove_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Remove_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class IsImageUrlExists_args implements org.apache.thrift.TBase<IsImageUrlExists_args, IsImageUrlExists_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("IsImageUrlExists_args");

    private static final org.apache.thrift.protocol.TField IMG_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("img_url", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new IsImageUrlExists_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new IsImageUrlExists_argsTupleSchemeFactory());
    }

    public String img_url; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      IMG_URL((short)1, "img_url");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IMG_URL
            return IMG_URL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IMG_URL, new org.apache.thrift.meta_data.FieldMetaData("img_url", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(IsImageUrlExists_args.class, metaDataMap);
    }

    public IsImageUrlExists_args() {
    }

    public IsImageUrlExists_args(
      String img_url)
    {
      this();
      this.img_url = img_url;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public IsImageUrlExists_args(IsImageUrlExists_args other) {
      if (other.isSetImg_url()) {
        this.img_url = other.img_url;
      }
    }

    public IsImageUrlExists_args deepCopy() {
      return new IsImageUrlExists_args(this);
    }

    @Override
    public void clear() {
      this.img_url = null;
    }

    public String getImg_url() {
      return this.img_url;
    }

    public IsImageUrlExists_args setImg_url(String img_url) {
      this.img_url = img_url;
      return this;
    }

    public void unsetImg_url() {
      this.img_url = null;
    }

    /** Returns true if field img_url is set (has been assigned a value) and false otherwise */
    public boolean isSetImg_url() {
      return this.img_url != null;
    }

    public void setImg_urlIsSet(boolean value) {
      if (!value) {
        this.img_url = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case IMG_URL:
        if (value == null) {
          unsetImg_url();
        } else {
          setImg_url((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case IMG_URL:
        return getImg_url();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case IMG_URL:
        return isSetImg_url();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof IsImageUrlExists_args)
        return this.equals((IsImageUrlExists_args)that);
      return false;
    }

    public boolean equals(IsImageUrlExists_args that) {
      if (that == null)
        return false;

      boolean this_present_img_url = true && this.isSetImg_url();
      boolean that_present_img_url = true && that.isSetImg_url();
      if (this_present_img_url || that_present_img_url) {
        if (!(this_present_img_url && that_present_img_url))
          return false;
        if (!this.img_url.equals(that.img_url))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(IsImageUrlExists_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      IsImageUrlExists_args typedOther = (IsImageUrlExists_args)other;

      lastComparison = Boolean.valueOf(isSetImg_url()).compareTo(typedOther.isSetImg_url());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetImg_url()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.img_url, typedOther.img_url);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("IsImageUrlExists_args(");
      boolean first = true;

      sb.append("img_url:");
      if (this.img_url == null) {
        sb.append("null");
      } else {
        sb.append(this.img_url);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class IsImageUrlExists_argsStandardSchemeFactory implements SchemeFactory {
      public IsImageUrlExists_argsStandardScheme getScheme() {
        return new IsImageUrlExists_argsStandardScheme();
      }
    }

    private static class IsImageUrlExists_argsStandardScheme extends StandardScheme<IsImageUrlExists_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, IsImageUrlExists_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // IMG_URL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.img_url = iprot.readString();
                struct.setImg_urlIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, IsImageUrlExists_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.img_url != null) {
          oprot.writeFieldBegin(IMG_URL_FIELD_DESC);
          oprot.writeString(struct.img_url);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class IsImageUrlExists_argsTupleSchemeFactory implements SchemeFactory {
      public IsImageUrlExists_argsTupleScheme getScheme() {
        return new IsImageUrlExists_argsTupleScheme();
      }
    }

    private static class IsImageUrlExists_argsTupleScheme extends TupleScheme<IsImageUrlExists_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, IsImageUrlExists_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetImg_url()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetImg_url()) {
          oprot.writeString(struct.img_url);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, IsImageUrlExists_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.img_url = iprot.readString();
          struct.setImg_urlIsSet(true);
        }
      }
    }

  }

  public static class IsImageUrlExists_result implements org.apache.thrift.TBase<IsImageUrlExists_result, IsImageUrlExists_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("IsImageUrlExists_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new IsImageUrlExists_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new IsImageUrlExists_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(IsImageUrlExists_result.class, metaDataMap);
    }

    public IsImageUrlExists_result() {
    }

    public IsImageUrlExists_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public IsImageUrlExists_result(IsImageUrlExists_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public IsImageUrlExists_result deepCopy() {
      return new IsImageUrlExists_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public IsImageUrlExists_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof IsImageUrlExists_result)
        return this.equals((IsImageUrlExists_result)that);
      return false;
    }

    public boolean equals(IsImageUrlExists_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(IsImageUrlExists_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      IsImageUrlExists_result typedOther = (IsImageUrlExists_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("IsImageUrlExists_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class IsImageUrlExists_resultStandardSchemeFactory implements SchemeFactory {
      public IsImageUrlExists_resultStandardScheme getScheme() {
        return new IsImageUrlExists_resultStandardScheme();
      }
    }

    private static class IsImageUrlExists_resultStandardScheme extends StandardScheme<IsImageUrlExists_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, IsImageUrlExists_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, IsImageUrlExists_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class IsImageUrlExists_resultTupleSchemeFactory implements SchemeFactory {
      public IsImageUrlExists_resultTupleScheme getScheme() {
        return new IsImageUrlExists_resultTupleScheme();
      }
    }

    private static class IsImageUrlExists_resultTupleScheme extends TupleScheme<IsImageUrlExists_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, IsImageUrlExists_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, IsImageUrlExists_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class PushImageTfsKey_args implements org.apache.thrift.TBase<PushImageTfsKey_args, PushImageTfsKey_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PushImageTfsKey_args");

    private static final org.apache.thrift.protocol.TField IMG_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("img_url", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField IMAGE_TFSKEY_FIELD_DESC = new org.apache.thrift.protocol.TField("image_tfskey", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new PushImageTfsKey_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new PushImageTfsKey_argsTupleSchemeFactory());
    }

    public String img_url; // required
    public String image_tfskey; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      IMG_URL((short)1, "img_url"),
      IMAGE_TFSKEY((short)2, "image_tfskey");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IMG_URL
            return IMG_URL;
          case 2: // IMAGE_TFSKEY
            return IMAGE_TFSKEY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IMG_URL, new org.apache.thrift.meta_data.FieldMetaData("img_url", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.IMAGE_TFSKEY, new org.apache.thrift.meta_data.FieldMetaData("image_tfskey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PushImageTfsKey_args.class, metaDataMap);
    }

    public PushImageTfsKey_args() {
    }

    public PushImageTfsKey_args(
      String img_url,
      String image_tfskey)
    {
      this();
      this.img_url = img_url;
      this.image_tfskey = image_tfskey;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public PushImageTfsKey_args(PushImageTfsKey_args other) {
      if (other.isSetImg_url()) {
        this.img_url = other.img_url;
      }
      if (other.isSetImage_tfskey()) {
        this.image_tfskey = other.image_tfskey;
      }
    }

    public PushImageTfsKey_args deepCopy() {
      return new PushImageTfsKey_args(this);
    }

    @Override
    public void clear() {
      this.img_url = null;
      this.image_tfskey = null;
    }

    public String getImg_url() {
      return this.img_url;
    }

    public PushImageTfsKey_args setImg_url(String img_url) {
      this.img_url = img_url;
      return this;
    }

    public void unsetImg_url() {
      this.img_url = null;
    }

    /** Returns true if field img_url is set (has been assigned a value) and false otherwise */
    public boolean isSetImg_url() {
      return this.img_url != null;
    }

    public void setImg_urlIsSet(boolean value) {
      if (!value) {
        this.img_url = null;
      }
    }

    public String getImage_tfskey() {
      return this.image_tfskey;
    }

    public PushImageTfsKey_args setImage_tfskey(String image_tfskey) {
      this.image_tfskey = image_tfskey;
      return this;
    }

    public void unsetImage_tfskey() {
      this.image_tfskey = null;
    }

    /** Returns true if field image_tfskey is set (has been assigned a value) and false otherwise */
    public boolean isSetImage_tfskey() {
      return this.image_tfskey != null;
    }

    public void setImage_tfskeyIsSet(boolean value) {
      if (!value) {
        this.image_tfskey = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case IMG_URL:
        if (value == null) {
          unsetImg_url();
        } else {
          setImg_url((String)value);
        }
        break;

      case IMAGE_TFSKEY:
        if (value == null) {
          unsetImage_tfskey();
        } else {
          setImage_tfskey((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case IMG_URL:
        return getImg_url();

      case IMAGE_TFSKEY:
        return getImage_tfskey();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case IMG_URL:
        return isSetImg_url();
      case IMAGE_TFSKEY:
        return isSetImage_tfskey();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof PushImageTfsKey_args)
        return this.equals((PushImageTfsKey_args)that);
      return false;
    }

    public boolean equals(PushImageTfsKey_args that) {
      if (that == null)
        return false;

      boolean this_present_img_url = true && this.isSetImg_url();
      boolean that_present_img_url = true && that.isSetImg_url();
      if (this_present_img_url || that_present_img_url) {
        if (!(this_present_img_url && that_present_img_url))
          return false;
        if (!this.img_url.equals(that.img_url))
          return false;
      }

      boolean this_present_image_tfskey = true && this.isSetImage_tfskey();
      boolean that_present_image_tfskey = true && that.isSetImage_tfskey();
      if (this_present_image_tfskey || that_present_image_tfskey) {
        if (!(this_present_image_tfskey && that_present_image_tfskey))
          return false;
        if (!this.image_tfskey.equals(that.image_tfskey))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(PushImageTfsKey_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      PushImageTfsKey_args typedOther = (PushImageTfsKey_args)other;

      lastComparison = Boolean.valueOf(isSetImg_url()).compareTo(typedOther.isSetImg_url());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetImg_url()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.img_url, typedOther.img_url);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetImage_tfskey()).compareTo(typedOther.isSetImage_tfskey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetImage_tfskey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.image_tfskey, typedOther.image_tfskey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("PushImageTfsKey_args(");
      boolean first = true;

      sb.append("img_url:");
      if (this.img_url == null) {
        sb.append("null");
      } else {
        sb.append(this.img_url);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("image_tfskey:");
      if (this.image_tfskey == null) {
        sb.append("null");
      } else {
        sb.append(this.image_tfskey);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class PushImageTfsKey_argsStandardSchemeFactory implements SchemeFactory {
      public PushImageTfsKey_argsStandardScheme getScheme() {
        return new PushImageTfsKey_argsStandardScheme();
      }
    }

    private static class PushImageTfsKey_argsStandardScheme extends StandardScheme<PushImageTfsKey_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, PushImageTfsKey_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // IMG_URL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.img_url = iprot.readString();
                struct.setImg_urlIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // IMAGE_TFSKEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.image_tfskey = iprot.readString();
                struct.setImage_tfskeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, PushImageTfsKey_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.img_url != null) {
          oprot.writeFieldBegin(IMG_URL_FIELD_DESC);
          oprot.writeString(struct.img_url);
          oprot.writeFieldEnd();
        }
        if (struct.image_tfskey != null) {
          oprot.writeFieldBegin(IMAGE_TFSKEY_FIELD_DESC);
          oprot.writeString(struct.image_tfskey);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class PushImageTfsKey_argsTupleSchemeFactory implements SchemeFactory {
      public PushImageTfsKey_argsTupleScheme getScheme() {
        return new PushImageTfsKey_argsTupleScheme();
      }
    }

    private static class PushImageTfsKey_argsTupleScheme extends TupleScheme<PushImageTfsKey_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, PushImageTfsKey_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetImg_url()) {
          optionals.set(0);
        }
        if (struct.isSetImage_tfskey()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetImg_url()) {
          oprot.writeString(struct.img_url);
        }
        if (struct.isSetImage_tfskey()) {
          oprot.writeString(struct.image_tfskey);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, PushImageTfsKey_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.img_url = iprot.readString();
          struct.setImg_urlIsSet(true);
        }
        if (incoming.get(1)) {
          struct.image_tfskey = iprot.readString();
          struct.setImage_tfskeyIsSet(true);
        }
      }
    }

  }

  public static class PushImageTfsKey_result implements org.apache.thrift.TBase<PushImageTfsKey_result, PushImageTfsKey_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PushImageTfsKey_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new PushImageTfsKey_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new PushImageTfsKey_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PushImageTfsKey_result.class, metaDataMap);
    }

    public PushImageTfsKey_result() {
    }

    public PushImageTfsKey_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public PushImageTfsKey_result(PushImageTfsKey_result other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.success = other.success;
    }

    public PushImageTfsKey_result deepCopy() {
      return new PushImageTfsKey_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public PushImageTfsKey_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bit_vector.clear(__SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_bit_vector.get(__SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bit_vector.set(__SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof PushImageTfsKey_result)
        return this.equals((PushImageTfsKey_result)that);
      return false;
    }

    public boolean equals(PushImageTfsKey_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(PushImageTfsKey_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      PushImageTfsKey_result typedOther = (PushImageTfsKey_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("PushImageTfsKey_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class PushImageTfsKey_resultStandardSchemeFactory implements SchemeFactory {
      public PushImageTfsKey_resultStandardScheme getScheme() {
        return new PushImageTfsKey_resultStandardScheme();
      }
    }

    private static class PushImageTfsKey_resultStandardScheme extends StandardScheme<PushImageTfsKey_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, PushImageTfsKey_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, PushImageTfsKey_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(struct.success);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class PushImageTfsKey_resultTupleSchemeFactory implements SchemeFactory {
      public PushImageTfsKey_resultTupleScheme getScheme() {
        return new PushImageTfsKey_resultTupleScheme();
      }
    }

    private static class PushImageTfsKey_resultTupleScheme extends TupleScheme<PushImageTfsKey_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, PushImageTfsKey_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, PushImageTfsKey_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
